/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–º–ø–∞–Ω–∏–π –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞
 */

import { Request, Response } from 'express';
import { campaignModel } from '@/models/campaign';
import { contactModel } from '@/models/contact';
import { dialerService } from '@/services/dialer';
import { schedulerService } from '@/services/scheduler';
import { log } from '@/utils/logger';
import { CreateCampaignRequest, UpdateCampaignRequest, CampaignStatus } from '@/types';

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥ ID –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 */
function validateAndParseId(req: Request, res: Response, paramName: string = 'id'): number | null {
  const idParam = req.params[paramName];
  if (!idParam) {
    res.status(400).json({
      success: false,
      error: `${paramName} –Ω–µ —É–∫–∞–∑–∞–Ω`
    });
    return null;
  }

  const id = parseInt(idParam);
  if (isNaN(id) || id <= 0) {
    res.status(400).json({
      success: false,
      error: `${paramName} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º`
    });
    return null;
  }

  return id;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
 */
export async function getCampaigns(req: Request, res: Response): Promise<void> {
  try {
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const status = req.query.status as CampaignStatus;
    const createdBy = req.query.createdBy ? parseInt(req.query.createdBy as string) : undefined;

    const result = await campaignModel.getCampaigns(page, limit, status, createdBy);

    log.api(`Retrieved ${result.campaigns.length} campaigns (page ${page})`);

    res.json({
      success: true,
      data: result.campaigns,
      pagination: {
        page: result.page,
        limit,
        total: result.total,
        totalPages: result.totalPages,
      },
      message: '–°–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error('Error getting campaigns:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π'
    });
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function createCampaign(req: Request, res: Response): Promise<void> {
  try {
    const userId = (req as any).user?.id; // –ò–∑ middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    const campaignData: CreateCampaignRequest = {
      ...req.body,
      createdBy: userId
    };

    const campaign = await campaignModel.createCampaign(campaignData, userId);

    log.info(`Created campaign: ${campaign.name} (ID: ${campaign.id}) by user ${userId}`);

    res.status(201).json({
      success: true,
      data: campaign,
      message: '–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error('Error creating campaign:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ ID
 */
export async function getCampaignById(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    const campaign = await campaignModel.getCampaignById(id);

    if (!campaign) {
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    const contactStats = await contactModel.getContactsStatsByCampaign(id);

    res.json({
      success: true,
      data: {
        campaign,
        contactStats,
      },
      message: '–ö–∞–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`Error getting campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function updateCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    const updateData: UpdateCampaignRequest = req.body;
    const campaign = await campaignModel.updateCampaign(id, updateData);

    if (!campaign) {
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    log.info(`Updated campaign: ${campaign.name} (ID: ${id})`);

    res.json({
      success: true,
      data: campaign,
      message: '–ö–∞–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`Error updating campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function deleteCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    const campaign = await campaignModel.getCampaignById(id);
    if (!campaign) {
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    if (campaign.status === 'active') {
      res.status(400).json({
        success: false,
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é'
      });
      return;
    }

    await campaignModel.deleteCampaign(id);

    log.info(`Deleted campaign ID: ${id}`);

    res.json({
      success: true,
      message: '–ö–∞–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`Error deleting campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function startCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
    const canStart = await campaignModel.canStartCampaign(id);
    if (!canStart.canStart) {
      res.status(400).json({
        success: false,
        error: canStart.reason
      });
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –¥–∏–∞–ª–µ—Ä–µ
    await dialerService.startCampaign(id);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    const updatedCampaign = await campaignModel.getCampaignById(id);

    log.info(`Started campaign ID: ${id}`);

    res.json({
      success: true,
      message: '–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: updatedCampaign
    });
  } catch (error) {
    log.error(`Error starting campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function stopCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –¥–∏–∞–ª–µ—Ä–µ
    await dialerService.stopCampaign(id);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    const updatedCampaign = await campaignModel.getCampaignById(id);

    log.info(`Stopped campaign ID: ${id}`);

    res.json({
      success: true,
      message: '–ö–∞–º–ø–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: updatedCampaign
    });
  } catch (error) {
    log.error(`Error stopping campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function pauseCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ –¥–∏–∞–ª–µ—Ä–µ
    await dialerService.pauseCampaign(id);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    const updatedCampaign = await campaignModel.getCampaignById(id);

    log.info(`Paused campaign ID: ${id}`);

    res.json({
      success: true,
      message: '–ö–∞–º–ø–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: updatedCampaign
    });
  } catch (error) {
    log.error(`Error pausing campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π
 */
export async function getCampaignsStats(_req: Request, res: Response): Promise<void> {
  try {
    const stats = await campaignModel.getCampaignsSummary();
    
    res.json({
      success: true,
      data: stats,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error('Error getting campaigns stats:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–º–ø–∞–Ω–∏–π'
    });
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function uploadCampaignAudio(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    log.info(`üîç DEBUG: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${id}`);
    log.info(`üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω:`, req.file ? `${req.file.originalname} (${req.file.size} bytes)` : '–Ω–µ—Ç —Ñ–∞–π–ª–∞');

    const file = req.file;
    if (!file) {
      log.warn(`‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${id}`);
      res.status(400).json({
        success: false,
        error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–º–ø–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const campaign = await campaignModel.getCampaignById(id);
    if (!campaign) {
      log.warn(`‚ùå –ö–∞–º–ø–∞–Ω–∏—è ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    log.info(`üìÇ –§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${file.originalname}, —Ä–∞–∑–º–µ—Ä: ${file.size}, –ø—É—Ç—å: ${file.path}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ
    const audioDuration = 30; // –ó–∞–≥–ª—É—à–∫–∞
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏ (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "audio\")
    const fileName = file.filename; // multer —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
    const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8');
    log.info(`üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${originalName}`);
    
    const updatedCampaign = await campaignModel.updateCampaignAudio(id, fileName, originalName, audioDuration);

    log.info(`‚úÖ Uploaded audio for campaign ${id}: ${file.originalname}`);

    res.json({
      success: true,
      data: updatedCampaign,
      message: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`‚ùå Error uploading audio for campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'
    });
  }
}

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function scheduleCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    const { scheduledStart, scheduledStop, isRecurring, cronExpression } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (!scheduledStart) {
      res.status(400).json({
        success: false,
        error: '–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      });
      return;
    }

    if (isRecurring && !cronExpression) {
      res.status(400).json({
        success: false,
        error: '–î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–∞–º–ø–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ'
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    const updateData: UpdateCampaignRequest = {
      isScheduled: true,
      scheduledStart: new Date(scheduledStart),
      isRecurring,
      cronExpression
    };
    
    if (scheduledStop) {
      updateData.scheduledStop = new Date(scheduledStop);
    }
    
    const campaign = await campaignModel.updateCampaign(id, updateData);

    if (!campaign) {
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    await schedulerService.scheduleCampaign(campaign);

    log.info(`Scheduled campaign: ${campaign.name} (ID: ${id})`);

    res.json({
      success: true,
      data: campaign,
      message: '–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`Error scheduling campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function unscheduleCampaign(req: Request, res: Response): Promise<void> {
  try {
    const id = validateAndParseId(req, res);
    if (id === null) {
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    const updateData: UpdateCampaignRequest = {
      isScheduled: false,
      isRecurring: false
    };
    
    const campaign = await campaignModel.updateCampaign(id, updateData);

    if (!campaign) {
      res.status(404).json({
        success: false,
        error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
      return;
    }

    // –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await schedulerService.unscheduleCampaign(id);

    log.info(`Unscheduled campaign: ${campaign.name} (ID: ${id})`);

    res.json({
      success: true,
      data: campaign,
      message: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error(`Error unscheduling campaign ${req.params.id || 'unknown'}:`, error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
 */
export async function getScheduledCampaigns(_req: Request, res: Response): Promise<void> {
  try {
    const campaigns = await campaignModel.getScheduledCampaigns();
    
    res.json({
      success: true,
      data: campaigns,
      message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error('Error getting scheduled campaigns:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π'
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
 */
export async function getSchedulerStatus(_req: Request, res: Response): Promise<void> {
  try {
    const status = await schedulerService.getStatus();
    
    res.json({
      success: true,
      data: status,
      message: '–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    log.error('Error getting scheduler status:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞'
    });
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 */
export async function validateCronExpression(req: Request, res: Response): Promise<void> {
  try {
    const { cronExpression } = req.body;
    
    if (!cronExpression) {
      res.status(400).json({
        success: false,
        error: 'Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
      });
      return;
    }

    const isValid = await schedulerService.validateCronExpression(cronExpression);
    
    res.json({
      success: true,
      data: { isValid },
      message: isValid ? 'Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : 'Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
    });
  } catch (error) {
    log.error('Error validating cron expression:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è'
    });
  }
} 