/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
 */

import { query, checkConnection } from '../config/database';
import { runMigrations } from './migrate';

async function resetDatabase(): Promise<void> {
  console.log('üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const isConnected = await checkConnection();
    if (!isConnected) {
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    console.log('üóëÔ∏è  –£–¥–∞–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
    const tablesToDrop = [
      'blacklist_audit',
      'blacklist', 
      'call_results',
      'contacts',
      'campaigns',
      'scheduler_logs',
      'system_settings',
      'users',
      'migrations'
    ];
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    await query('DROP VIEW IF EXISTS v_active_blacklist CASCADE;');
    await query('DROP VIEW IF EXISTS v_blacklist_stats CASCADE;');
    await query('DROP VIEW IF EXISTS v_scheduled_campaigns CASCADE;');
    
    // –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    await query('DROP FUNCTION IF EXISTS update_blacklist_updated_at() CASCADE;');
    await query('DROP FUNCTION IF EXISTS normalize_phone_number(TEXT) CASCADE;');
    await query('DROP FUNCTION IF EXISTS normalize_blacklist_phone() CASCADE;');
    await query('DROP FUNCTION IF EXISTS check_blacklist_expiry(TEXT) CASCADE;');
    await query('DROP FUNCTION IF EXISTS cleanup_expired_blacklist_entries() CASCADE;');
    await query('DROP FUNCTION IF EXISTS blacklist_audit_function() CASCADE;');
    await query('DROP FUNCTION IF EXISTS update_campaign_updated_at() CASCADE;');
    await query('DROP FUNCTION IF EXISTS update_contact_updated_at() CASCADE;');
    await query('DROP FUNCTION IF EXISTS update_user_updated_at() CASCADE;');
    
    // –£–¥–∞–ª—è–µ–º —Ç–∏–ø—ã enum
    await query('DROP TYPE IF EXISTS blacklist_reason_type CASCADE;');
    await query('DROP TYPE IF EXISTS campaign_status CASCADE;');
    await query('DROP TYPE IF EXISTS contact_status CASCADE;');
    await query('DROP TYPE IF EXISTS call_status CASCADE;');
    await query('DROP TYPE IF EXISTS user_role CASCADE;');
    await query('DROP TYPE IF EXISTS scheduler_status CASCADE;');
    
    // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    for (const table of tablesToDrop) {
      await query(`DROP TABLE IF EXISTS ${table} CASCADE;`);
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${table}`);
    }
    
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await runMigrations();
    
    console.log('\nüéâ –°–±—Ä–æ—Å –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±—Ä–æ—Å –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  resetDatabase()
    .then(() => {
      console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { resetDatabase }; 