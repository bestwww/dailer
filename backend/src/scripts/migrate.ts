/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ß–∏—Ç–∞–µ—Ç SQL-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ database/migrations –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö
 */

import { readdir, readFile } from 'fs/promises';
import path from 'path';
import { query, checkConnection, getDatabaseInfo } from '../config/database';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
interface MigrationFile {
  filename: string;
  order: number;
  content: string;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function createMigrationsTable(): Promise<void> {
  console.log('üìã –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  const createTableQuery = `
    CREATE TABLE IF NOT EXISTS migrations (
      id SERIAL PRIMARY KEY,
      filename VARCHAR(255) NOT NULL UNIQUE,
      executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      checksum VARCHAR(32)
    );
  `;
  
  await query(createTableQuery);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —Å–æ–∑–¥–∞–Ω–∞');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function getExecutedMigrations(): Promise<string[]> {
  const result = await query<{ filename: string }>('SELECT filename FROM migrations ORDER BY executed_at');
  return result.rows.map(row => row.filename);
}

/**
 * –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function readMigrationFiles(): Promise<MigrationFile[]> {
  console.log('üìÅ –ß–∏—Ç–∞—é —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  const migrationsDir = path.join(process.cwd(), '../database/migrations');
  const files = await readdir(migrationsDir);
  
  const migrationFiles: MigrationFile[] = [];
  
  for (const filename of files) {
    if (filename.endsWith('.sql')) {
      const filePath = path.join(migrationsDir, filename);
      const content = await readFile(filePath, 'utf-8');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Ä—è–¥–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 001_init_schema.sql)
      const orderMatch = filename.match(/^(\d+)_/);
      const order = orderMatch && orderMatch[1] ? parseInt(orderMatch[1], 10) : 999;
      
      migrationFiles.push({
        filename,
        order,
        content
      });
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
  migrationFiles.sort((a, b) => a.order - b.order);
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${migrationFiles.length} —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
  return migrationFiles;
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function executeMigration(migration: MigrationFile): Promise<void> {
  console.log(`üîÑ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é: ${migration.filename}`);
  
  try {
    // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ SQL-–∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = splitSqlCommands(migration.content);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i]?.trim();
      if (command && command.length > 0) {
        try {
          await query(command);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, command.substring(0, 100) + '...');
          throw error;
        }
      }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    await query(
      'INSERT INTO migrations (filename) VALUES ($1)',
      [migration.filename]
    );
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.filename} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.filename}:`, error);
    throw error;
  }
}

/**
 * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ SQL-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */
function splitSqlCommands(content: string): string[] {
  // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ - –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
  // –≠—Ç–æ –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, –Ω–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤
  return [content];
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
 */
async function runMigrations(): Promise<void> {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const isConnected = await checkConnection();
    if (!isConnected) {
      throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbInfo = await getDatabaseInfo();
    console.log(`üìä –ü–æ–¥–∫–ª—é—á–µ–Ω –∫: ${dbInfo.version}`);
    console.log(`üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${dbInfo.activeConnections}/${dbInfo.totalConnections}\n`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await createMigrationsTable();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    const executedMigrations = await getExecutedMigrations();
    console.log(`üìã –£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${executedMigrations.length}`);
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationFiles = await readMigrationFiles();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    const pendingMigrations = migrationFiles.filter(
      migration => !executedMigrations.includes(migration.filename)
    );
    
    console.log(`‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${pendingMigrations.length}\n`);
    
    if (pendingMigrations.length === 0) {
      console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
      return;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    for (const migration of pendingMigrations) {
      await executeMigration(migration);
    }
    
    console.log('\nüéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMigrations()
    .then(() => {
      console.log('\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

export { runMigrations }; 