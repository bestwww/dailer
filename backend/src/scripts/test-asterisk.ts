/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Asterisk –∞–¥–∞–ø—Ç–µ—Ä–∞
 * –ó–∞–ø—É—Å–∫: npm run dev -- --script test-asterisk
 */

import { AsteriskAdapter } from '@/services/adapters/asterisk-adapter';
import { config } from '@/config';

async function testAsteriskAdapter() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Asterisk –∞–¥–∞–ø—Ç–µ—Ä–∞\n');

  const asteriskConfig = {
    host: config.asteriskHost,
    port: config.asteriskPort,
    username: config.asteriskUsername,
    password: config.asteriskPassword,
  };

  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Asterisk:');
  console.log(`   Host: ${asteriskConfig.host}:${asteriskConfig.port}`);
  console.log(`   User: ${asteriskConfig.username}`);
  console.log('');

  const adapter = new AsteriskAdapter(asteriskConfig);

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AMI
    console.log('üîå –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk AMI');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    adapter.on('connected', () => {
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ: connected');
    });

    adapter.on('disconnected', () => {
      console.log('üì° –°–æ–±—ã—Ç–∏–µ: disconnected');
    });

    adapter.on('error', (error) => {
      console.log(`‚ùå –°–æ–±—ã—Ç–∏–µ: error - ${error.message}`);
    });

    adapter.on('call:created', (event) => {
      console.log('üìû –°–æ–±—ã—Ç–∏–µ: call:created', event);
    });

    adapter.on('call:answered', (event) => {
      console.log('üìû –°–æ–±—ã—Ç–∏–µ: call:answered', event);
    });

    adapter.on('call:hangup', (event) => {
      console.log('üìû –°–æ–±—ã—Ç–∏–µ: call:hangup', event);
    });

    adapter.on('call:dtmf', (event) => {
      console.log('üìû –°–æ–±—ã—Ç–∏–µ: call:dtmf', event);
    });

    try {
      await adapter.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk AMI —É—Å–ø–µ—à–Ω–æ\n');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk AMI –Ω–µ —É–¥–∞–ª–æ—Å—å: ${errorMessage}\n`);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
      console.log('   - Asterisk –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('   - AMI –≤–∫–ª—é—á–µ–Ω –≤ manager.conf');
      console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n');
      return;
    }

    // –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('üìä –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    const status = adapter.getConnectionStatus();
    console.log(`   –ü–æ–¥–∫–ª—é—á–µ–Ω: ${status.connected ? '‚úÖ' : '‚ùå'}`);
    console.log(`   –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status.reconnectAttempts}/${status.maxReconnectAttempts}\n`);

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìà –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Asterisk');
    try {
      const stats = await adapter.getStats();
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏: ${stats.activeCalls}`);
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: ${stats.activeChannels}`);
      console.log(`   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${stats.uptime}s`);
      console.log(`   –ü–æ–¥–∫–ª—é—á–µ–Ω: ${stats.connected ? '‚úÖ' : '‚ùå'}\n`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${errorMessage}\n`);
    }

    // –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    console.log('üîß –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã Asterisk');
    try {
      const result = await adapter.sendCommand('core show version');
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –û—Ç–≤–µ—Ç: ${result.response}`);
      if (result.output) {
        console.log(`   –í—ã–≤–æ–¥: ${result.output.substring(0, 100)}...`);
      }
      console.log('');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${errorMessage}\n`);
    }

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å SIP trunk)
    console.log('üìû –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)');
    console.log('   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ù–ï –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
      const fakePhoneNumber = '1234567890';
      const campaignId = 999;
      
      console.log(`   –ü–æ–ø—ã—Ç–∫–∞ –∑–≤–æ–Ω–∫–∞: ${fakePhoneNumber} (–∫–∞–º–ø–∞–Ω–∏—è: ${campaignId})`);
      
      // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –æ—à–∏–±–∫–æ–π, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
      const callUuid = await adapter.makeCall(fakePhoneNumber, campaignId);
      console.log(`   ‚úÖ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —Å UUID: ${callUuid}`);
      
      // –°—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
      setTimeout(async () => {
        try {
          await adapter.hangupCall(callUuid);
          console.log(`   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${callUuid}`);
        } catch (hangupError) {
          const errorMessage = hangupError instanceof Error ? hangupError.message : String(hangupError);
          console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞: ${errorMessage}`);
        }
      }, 2000);
      
    } catch (callError) {
      const errorMessage = callError instanceof Error ? callError.message : String(callError);
      console.log(`   ‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞: ${errorMessage}`);
      console.log('   üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ SIP trunk –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    console.log('\nüéØ –†–µ–∑—é–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚úÖ Asterisk –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ AMI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VoIP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≥–æ—Ç–æ–≤–∞');

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    await new Promise(resolve => setTimeout(resolve, 3000));

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Asterisk AMI');
    adapter.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testAsteriskAdapter().then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch((error) => {
    console.error('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error);
    process.exit(1);
  });
}

export { testAsteriskAdapter }; 