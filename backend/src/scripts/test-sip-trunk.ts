/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SIP trunk –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * –ó–∞–ø—É—Å–∫: npm run dev -- --script test-sip-trunk
 */

import { AsteriskAdapter } from '@/services/adapters/asterisk-adapter';
import { config } from '@/config';
import { log } from '@/utils/logger';

async function testSIPTrunk() {
  console.log('üìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SIP Trunk (62.141.121.197:5070)\n');

  const asteriskConfig = {
    host: config.asteriskHost,
    port: config.asteriskPort,
    username: config.asteriskUsername,
    password: config.asteriskPassword,
  };

  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   Asterisk AMI: ${asteriskConfig.host}:${asteriskConfig.port}`);
  console.log(`   SIP Trunk: 62.141.121.197:5070`);
  console.log(`   Caller ID: ${process.env.SIP_CALLER_ID_NUMBER || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`);

  const adapter = new AsteriskAdapter(asteriskConfig);

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AMI
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk AMI...');
    await adapter.connect();
    console.log('‚úÖ AMI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP endpoint
    console.log('üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP trunk –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    try {
      const endpointResult = await adapter.sendCommand('pjsip show endpoint trunk');
      console.log('‚úÖ SIP endpoint trunk –Ω–∞–π–¥–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å outbound_proxy
      if (endpointResult.output && endpointResult.output.includes('62.141.121.197:5070')) {
        console.log('‚úÖ SIP trunk –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 62.141.121.197:5070');
      } else {
        console.log('‚ö†Ô∏è SIP trunk –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SIP endpoint: ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤...');
    try {
      const transportResult = await adapter.sendCommand('pjsip show transports');
      console.log('‚úÖ SIP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã');
      
      if (transportResult.output && transportResult.output.includes('0.0.0.0:5060')) {
        console.log('‚úÖ UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–ª—É—à–∞–µ—Ç –Ω–∞ 0.0.0.0:5060');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è trunk –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)...');
    try {
      const authResult = await adapter.sendCommand('pjsip show auths');
      if (authResult.output && !authResult.output.includes('trunk')) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è trunk –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
      } else {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è trunk (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–µ–π)');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${error.message}`);
    }

    // –û–°–¢–û–†–û–ñ–ù–û: –¢–µ—Å—Ç –∑–≤–æ–Ω–∫–∞ —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìû –¢–µ—Å—Ç –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)');
    console.log('   ‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('   docker exec -it dialer_asterisk asterisk -r');
    console.log('   CLI> originate PJSIP/1234567890@trunk application Echo');

    // –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    console.log('\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞...');
    const testPhoneNumber = '1234567890';
    const testCampaignId = 999;
    
    console.log(`   –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${testPhoneNumber}`);
    console.log(`   –ö–∞–º–ø–∞–Ω–∏—è: ${testCampaignId}`);
    console.log(`   Channel: PJSIP/${testPhoneNumber}@trunk`);
    console.log(`   Context: campaign-calls`);
    console.log('   ‚úÖ –õ–æ–≥–∏–∫–∞ –∑–≤–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');

    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ SIP Trunk:');
    console.log('‚úÖ AMI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ SIP endpoint trunk –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã');
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤');
    console.log('‚úÖ –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: 62.141.121.197:5070');

    console.log('\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–∫–∏');
    console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Caller ID');
    console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
    console.log('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs dialer_asterisk');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç AMI');
    adapter.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testSIPTrunk().then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SIP Trunk –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }).catch((error) => {
    console.error('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error);
    process.exit(1);
  });
}

export { testSIPTrunk }; 