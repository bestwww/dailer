/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (FreeSWITCH, Asterisk, etc.)
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ VoIP —Å–∏—Å—Ç–µ–º–∞–º–∏
 */

import { EventEmitter } from 'events';

// üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
export interface VoIPProvider extends EventEmitter {
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º ===
  connect(): Promise<void>;
  disconnect(): void;
  isConnected(): boolean;
  
  // === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞–º–∏ ===
  makeCall(phoneNumber: string, campaignId: number, audioFilePath?: string): Promise<string>;
  hangupCall(callUuid: string): Promise<void>;
  
  // === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===
  getConnectionStatus(): VoIPConnectionStatus;
  getStats(): Promise<VoIPStats>;
  
  // === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ===
  sendCommand(command: string): Promise<any>;
}

// üîß –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface VoIPConnectionStatus {
  connected: boolean;
  reconnectAttempts: number;
  maxReconnectAttempts: number;
  lastError?: string;
}

export interface VoIPStats {
  activeCalls: number;
  activeChannels: number;
  uptime: number;
  connected: boolean;
}

// üéõÔ∏è –°–æ–±—ã—Ç–∏—è VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
export interface VoIPCallCreatedEvent {
  callUuid: string;
  phoneNumber: string;
  callerIdNumber?: string;
  timestamp: Date;
}

export interface VoIPCallAnsweredEvent {
  callUuid: string;
  phoneNumber: string;
  answerTime: Date;
  timestamp: Date;
}

export interface VoIPCallHangupEvent {
  callUuid: string;
  phoneNumber: string;
  hangupCause: string;
  callDuration: number;
  billableSeconds: number;
  timestamp: Date;
}

export interface VoIPCallDTMFEvent {
  callUuid: string;
  phoneNumber: string;
  dtmfDigit: string;
  timestamp: Date;
}

export interface VoIPCallAMDEvent {
  callUuid: string;
  phoneNumber: string;
  amdResult: string;
  amdConfidence: number;
  timestamp: Date;
}

export interface VoIPLeadCreatedEvent {
  callUuid: string;
  phoneNumber: string;
  campaignId: number;
  dtmfResponse: string;
  callResult: string;
  timestamp: Date;
}

// üè≠ –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
export type VoIPProviderType = 'freeswitch' | 'asterisk';

export interface VoIPConfig {
  provider: VoIPProviderType;
  freeswitch?: {
    host: string;
    port: number;
    password: string;
  };
  asterisk?: {
    host: string;
    port: number;
    username: string;
    password: string;
  };
} 