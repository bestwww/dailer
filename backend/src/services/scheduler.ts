/**
 * –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º –∫–∞–º–ø–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
 */

import * as cron from 'node-cron';
import { campaignModel } from '@/models/campaign';
import { dialerService } from '@/services/dialer';
import { log } from '@/utils/logger';
import { Campaign } from '@/types';

interface ScheduledJob {
  campaignId: number;
  task: cron.ScheduledTask;
  type: 'start' | 'stop' | 'recurring';
  description: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π
 */
export class SchedulerService {
  private scheduledJobs: Map<string, ScheduledJob> = new Map();
  private isRunning: boolean = false;

  /**
   * –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  async start(): Promise<void> {
    try {
      if (this.isRunning) {
        log.warn('Scheduler is already running');
        return;
      }

      log.info('üïê Starting scheduler service...');

      // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
      await this.loadScheduledCampaigns();

      this.isRunning = true;
      log.info('‚úÖ Scheduler service started successfully');

    } catch (error) {
      log.error('‚ùå Failed to start scheduler service:', error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  async stop(): Promise<void> {
    try {
      log.info('üõë Stopping scheduler service...');

      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
      this.stopAllScheduledJobs();

      this.isRunning = false;
      log.info('‚úÖ Scheduler service stopped');

    } catch (error) {
      log.error('‚ùå Failed to stop scheduler service:', error);
      throw error;
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async scheduleCampaign(campaign: Campaign): Promise<void> {
    try {
      if (!campaign.isScheduled) {
        log.warn(`Campaign ${campaign.id} is not scheduled`);
        return;
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
      await this.unscheduleCampaign(campaign.id);

      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
      if (campaign.scheduledStart) {
        await this.scheduleStart(campaign);
      }

      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (campaign.scheduledStop) {
        await this.scheduleStop(campaign);
      }

      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
      if (campaign.isRecurring && campaign.cronExpression) {
        await this.scheduleRecurring(campaign);
      }

      log.info(`üìÖ Scheduled campaign: ${campaign.name} (ID: ${campaign.id})`);

    } catch (error) {
      log.error(`Failed to schedule campaign ${campaign.id}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async unscheduleCampaign(campaignId: number): Promise<void> {
    try {
      const keysToRemove: string[] = [];

      // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
      for (const [key, job] of this.scheduledJobs) {
        if (job.campaignId === campaignId) {
          job.task.stop();
          job.task.destroy();
          keysToRemove.push(key);
        }
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç—ã
      keysToRemove.forEach(key => {
        this.scheduledJobs.delete(key);
      });

      log.info(`üóëÔ∏è Unscheduled campaign: ${campaignId}`);

    } catch (error) {
      log.error(`Failed to unschedule campaign ${campaignId}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
   */
  private async loadScheduledCampaigns(): Promise<void> {
    try {
      const campaigns = await campaignModel.getScheduledCampaigns();

      log.info(`Loading ${campaigns.length} scheduled campaigns...`);

      for (const campaign of campaigns) {
        await this.scheduleCampaign(campaign);
      }

      log.info(`‚úÖ Loaded ${campaigns.length} scheduled campaigns`);

    } catch (error) {
      log.error('Failed to load scheduled campaigns:', error);
      throw error;
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async scheduleStart(campaign: Campaign): Promise<void> {
    const startTime = new Date(campaign.scheduledStart!);
    const now = new Date();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤ –±—É–¥—É—â–µ–º
    if (startTime <= now) {
      log.warn(`Campaign ${campaign.id} scheduled start time is in the past`);
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const cronExpression = this.dateToCronExpression(startTime);

    const task = cron.schedule(cronExpression, async () => {
      try {
        log.info(`üöÄ Auto-starting campaign: ${campaign.name} (ID: ${campaign.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        const currentCampaign = await campaignModel.getCampaignById(campaign.id);
        if (currentCampaign?.status === 'active') {
          log.warn(`Campaign ${campaign.id} is already active`);
          return;
        }

        // –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏
        await dialerService.startCampaign(campaign.id);

        log.info(`‚úÖ Auto-started campaign: ${campaign.name} (ID: ${campaign.id})`);

      } catch (error) {
        log.error(`Failed to auto-start campaign ${campaign.id}:`, error);
      }
    }, {
      timezone: campaign.timezone || 'UTC'
    });

    const jobKey = `start_${campaign.id}`;
    this.scheduledJobs.set(jobKey, {
      campaignId: campaign.id,
      task,
      type: 'start',
      description: `Auto-start campaign ${campaign.name} at ${startTime.toISOString()}`
    });

    log.info(`üìÖ Scheduled start for campaign ${campaign.id} at ${startTime.toISOString()}`);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async scheduleStop(campaign: Campaign): Promise<void> {
    const stopTime = new Date(campaign.scheduledStop!);
    const now = new Date();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –±—É–¥—É—â–µ–º
    if (stopTime <= now) {
      log.warn(`Campaign ${campaign.id} scheduled stop time is in the past`);
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const cronExpression = this.dateToCronExpression(stopTime);

    const task = cron.schedule(cronExpression, async () => {
      try {
        log.info(`‚èπÔ∏è Auto-stopping campaign: ${campaign.name} (ID: ${campaign.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–º–ø–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        const currentCampaign = await campaignModel.getCampaignById(campaign.id);
        if (currentCampaign?.status !== 'active') {
          log.warn(`Campaign ${campaign.id} is not active`);
          return;
        }

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
        await dialerService.stopCampaign(campaign.id);

        log.info(`‚úÖ Auto-stopped campaign: ${campaign.name} (ID: ${campaign.id})`);

      } catch (error) {
        log.error(`Failed to auto-stop campaign ${campaign.id}:`, error);
      }
    }, {
      timezone: campaign.timezone || 'UTC'
    });

    const jobKey = `stop_${campaign.id}`;
    this.scheduledJobs.set(jobKey, {
      campaignId: campaign.id,
      task,
      type: 'stop',
      description: `Auto-stop campaign ${campaign.name} at ${stopTime.toISOString()}`
    });

    log.info(`üìÖ Scheduled stop for campaign ${campaign.id} at ${stopTime.toISOString()}`);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
   */
  private async scheduleRecurring(campaign: Campaign): Promise<void> {
    const cronExpression = campaign.cronExpression!;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    if (!cron.validate(cronExpression)) {
      throw new Error(`Invalid cron expression: ${cronExpression}`);
    }

    const task = cron.schedule(cronExpression, async () => {
      try {
        log.info(`üîÑ Recurring start for campaign: ${campaign.name} (ID: ${campaign.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        const currentCampaign = await campaignModel.getCampaignById(campaign.id);
        if (currentCampaign?.status === 'active') {
          log.warn(`Campaign ${campaign.id} is already active, skipping recurring start`);
          return;
        }

        // –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏
        await dialerService.startCampaign(campaign.id);

        log.info(`‚úÖ Recurring started campaign: ${campaign.name} (ID: ${campaign.id})`);

      } catch (error) {
        log.error(`Failed to recurring start campaign ${campaign.id}:`, error);
      }
    }, {
      timezone: campaign.timezone || 'UTC'
    });

    const jobKey = `recurring_${campaign.id}`;
    this.scheduledJobs.set(jobKey, {
      campaignId: campaign.id,
      task,
      type: 'recurring',
      description: `Recurring start for campaign ${campaign.name} (${cronExpression})`
    });

    log.info(`üìÖ Scheduled recurring task for campaign ${campaign.id}: ${cronExpression}`);
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
   */
  private dateToCronExpression(date: Date): string {
    const minute = date.getMinutes();
    const hour = date.getHours();
    const dayOfMonth = date.getDate();
    const month = date.getMonth() + 1;

    // –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    return `${minute} ${hour} ${dayOfMonth} ${month} *`;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  private stopAllScheduledJobs(): void {
    for (const [_key, job] of this.scheduledJobs) {
      job.task.stop();
      job.task.destroy();
    }
    this.scheduledJobs.clear();
    log.info('üóëÔ∏è Stopped all scheduled jobs');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): {
    isRunning: boolean;
    scheduledJobs: Array<{
      campaignId: number;
      type: 'start' | 'stop' | 'recurring';
      description: string;
      isRunning: boolean;
    }>;
  } {
    const jobs = Array.from(this.scheduledJobs.values()).map(job => ({
      campaignId: job.campaignId,
      type: job.type,
      description: job.description,
      isRunning: true // node-cron –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    }));

    return {
      isRunning: this.isRunning,
      scheduledJobs: jobs
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
   */
  validateCronExpression(cronExpression: string): boolean {
    return cron.validate(cronExpression);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const schedulerService = new SchedulerService(); 