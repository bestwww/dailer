/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–∏–∞–ª–µ—Ä–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞
 */

import { EventEmitter } from 'events';
import { freeswitchClient } from '@/services/freeswitch';
import { campaignModel } from '@/models/campaign';
import { contactModel } from '@/models/contact';
import { callResultModel } from '@/models/call-result';
import { blacklistModel } from '@/models/blacklist';
import bitrix24Service from '@/services/bitrix24';
import { webhookService } from '@/services/webhook';
import { timezoneService } from '@/services/timezone';
import { monitoringService } from '@/services/monitoring';
import { config } from '@/config';
import { log } from '@/utils/logger';
import { Campaign, Contact, CallStatus, ContactStatus } from '@/types';

interface ActiveCall {
  callUuid: string;
  campaignId: number;
  contactId: number;
  phoneNumber: string;
  startTime: Date;
  status: CallStatus;
}

interface DialerStats {
  activeCalls: number;
  totalCallsToday: number;
  successfulCallsToday: number;
  failedCallsToday: number;
  callsPerMinute: number;
  activeCampaigns: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–∏–∞–ª–µ—Ä–∞
 */
export class DialerService extends EventEmitter {
  private activeCalls: Map<string, ActiveCall> = new Map();
  private campaignIntervals: Map<number, NodeJS.Timeout> = new Map();
  private isRunning: boolean = false;
  private callsInLastMinute: Date[] = [];

  constructor() {
    super();
    this.setupFreeSwitchEventHandlers();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–µ—Ä–∞
   */
  async start(): Promise<void> {
    try {
      if (this.isRunning) {
        log.warn('Dialer is already running');
        return;
      }

      log.info('üöÄ Starting dialer service...');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FreeSWITCH
      if (!freeswitchClient.getConnectionStatus().connected) {
        await freeswitchClient.connect();
      }

      this.isRunning = true;
      
      // –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
      await this.startActiveCampaigns();
      
      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.startMonitoring();

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è health checks
      this.registerHealthChecks();

      log.info('‚úÖ Dialer service started successfully');
      this.emit('started');

    } catch (error) {
      log.error('‚ùå Failed to start dialer service:', error);
      this.isRunning = false;
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ª–µ—Ä–∞
   */
  async stop(): Promise<void> {
    try {
      log.info('üõë Stopping dialer service...');

      this.isRunning = false;

      // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
      await this.stopAllCampaigns();

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      await this.hangupAllActiveCalls();

      log.info('‚úÖ Dialer service stopped');
      this.emit('stopped');

    } catch (error) {
      log.error('‚ùå Failed to stop dialer service:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async startCampaign(campaignId: number): Promise<void> {
    try {
      const campaign = await campaignModel.getCampaignById(campaignId);
      
      if (!campaign) {
        throw new Error(`Campaign ${campaignId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞
      const canStart = await campaignModel.canStartCampaign(campaignId);
      if (!canStart.canStart) {
        throw new Error(`Cannot start campaign: ${canStart.reason}`);
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏
      await campaignModel.updateCampaign(campaignId, { status: 'active' });

      // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–∑–≤–æ–Ω–∞
      const interval = setInterval(async () => {
        await this.processCampaignCalls(campaignId);
      }, this.calculateCallInterval(campaign.callsPerMinute));

      this.campaignIntervals.set(campaignId, interval);

      log.info(`üìû Started campaign: ${campaign.name} (ID: ${campaignId})`);
      this.emit('campaign:started', { campaignId, campaign });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏
      await webhookService.sendCampaignEvent('campaign.started', {
        campaignId: campaign.id,
        campaignName: campaign.name,
        status: campaign.status,
        totalContacts: campaign.totalContacts,
        completedCalls: campaign.completedCalls,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      log.error(`Failed to start campaign ${campaignId}:`, error);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async stopCampaign(campaignId: number): Promise<void> {
    try {
      const interval = this.campaignIntervals.get(campaignId);
      
      if (interval) {
        clearInterval(interval);
        this.campaignIntervals.delete(campaignId);
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏
      await campaignModel.updateCampaign(campaignId, { status: 'cancelled' });

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
      await this.hangupCampaignCalls(campaignId);

      log.info(`‚è∏Ô∏è Stopped campaign: ${campaignId}`);
      this.emit('campaign:stopped', { campaignId });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏
      const campaign = await campaignModel.getCampaignById(campaignId);
      if (campaign) {
        await webhookService.sendCampaignEvent('campaign.stopped', {
          campaignId: campaign.id,
          campaignName: campaign.name,
          status: campaign.status,
          totalContacts: campaign.totalContacts,
          completedCalls: campaign.completedCalls,
          timestamp: new Date().toISOString()
        });
      }

    } catch (error) {
      log.error(`Failed to stop campaign ${campaignId}:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (–ø–∞—É–∑–∞)
   */
  async pauseCampaign(campaignId: number): Promise<void> {
    try {
      const interval = this.campaignIntervals.get(campaignId);
      
      if (interval) {
        clearInterval(interval);
        this.campaignIntervals.delete(campaignId);
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ paused
      await campaignModel.updateCampaign(campaignId, { status: 'paused' });

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
      await this.hangupCampaignCalls(campaignId);

      log.info(`‚è∏Ô∏è Paused campaign: ${campaignId}`);
      this.emit('campaign:paused', { campaignId });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—É–∑–µ –∫–∞–º–ø–∞–Ω–∏–∏
      const campaign = await campaignModel.getCampaignById(campaignId);
      if (campaign) {
        await webhookService.sendCampaignEvent('campaign.stopped', {
          campaignId: campaign.id,
          campaignName: campaign.name,
          status: campaign.status,
          totalContacts: campaign.totalContacts,
          completedCalls: campaign.completedCalls,
          timestamp: new Date().toISOString()
        });
      }

    } catch (error) {
      log.error(`Failed to pause campaign ${campaignId}:`, error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async processCampaignCalls(campaignId: number): Promise<void> {
    try {
      if (!this.isRunning) {
        return;
      }

      const campaign = await campaignModel.getCampaignById(campaignId);
      
      if (!campaign || campaign.status !== 'active') {
        await this.stopCampaign(campaignId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
      if (!this.isWorkingTime(campaign)) {
        log.debug(`Campaign ${campaignId} outside working hours`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      const currentCampaignCalls = this.getActiveCampaignCallsCount(campaignId);
      
      if (currentCampaignCalls >= campaign.maxConcurrentCalls) {
        log.debug(`Campaign ${campaignId} reached max concurrent calls limit`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–≤–æ–Ω–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É
      if (!this.canMakeCall(campaign.callsPerMinute)) {
        log.debug(`Campaign ${campaignId} reached calls per minute limit`);
        return;
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      const allContacts = await contactModel.getNextContactsForCalling(
        campaignId,
        Math.min(campaign.maxConcurrentCalls - currentCampaignCalls, 50) // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      );

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
      const contactsToCall = allContacts.filter(contact => 
        this.isContactInWorkingTime(campaign, contact)
      ).slice(0, campaign.maxConcurrentCalls - currentCampaignCalls);

      // –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
      for (const contact of contactsToCall) {
        await this.makeCall(campaign, contact);
      }

    } catch (error) {
      log.error(`Error processing campaign ${campaignId} calls:`, error);
    }
  }

  /**
   * –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  private async makeCall(campaign: Campaign, contact: Contact): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const blacklistCheck = await blacklistModel.isBlacklisted(contact.phoneNumber);
      
      if (blacklistCheck.isBlacklisted) {
        log.warn(`Blocked call to blacklisted number: ${contact.phoneNumber}`, {
          reason: blacklistCheck.reason,
          campaignId: campaign.id,
          contactId: contact.id
        });

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        await blacklistModel.incrementAttemptCount(contact.phoneNumber);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        await contactModel.updateContactCallStats(
          contact.id,
          'blacklisted',
          new Date()
        );

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞
        await callResultModel.createCallResult({
          contactId: contact.id,
          campaignId: campaign.id,
          phoneNumber: contact.phoneNumber,
          callStatus: 'blacklisted',
          callDuration: 0,
          ringDuration: 0,
          isAnsweringMachine: false,
          bitrixLeadCreated: false,
          additionalData: {
            blacklistReason: blacklistCheck.reason,
            blockedAt: new Date().toISOString()
          }
        });

        this.emit('call:blocked', {
          campaignId: campaign.id,
          contactId: contact.id,
          phoneNumber: contact.phoneNumber,
          reason: blacklistCheck.reason
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        monitoringService.trackBlacklistBlock();

        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      await contactModel.updateContactCallStats(
        contact.id,
        'calling',
        new Date()
      );

      // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ FreeSWITCH
      const callUuid = await freeswitchClient.makeCall(
        contact.phoneNumber,
        campaign.id,
        campaign.audioFilePath
      );

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
      const activeCall: ActiveCall = {
        callUuid,
        campaignId: campaign.id,
        contactId: contact.id,
        phoneNumber: contact.phoneNumber,
        startTime: new Date(),
        status: 'answered', // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
      };

      this.activeCalls.set(callUuid, activeCall);
      this.trackCallForRateLimit();

      log.call.started(contact.phoneNumber, campaign.id, {
        callUuid,
        contactId: contact.id,
      });

      this.emit('call:initiated', {
        callUuid,
        campaignId: campaign.id,
        contactId: contact.id,
        phoneNumber: contact.phoneNumber,
      });

    } catch (error) {
      log.error(`Failed to make call to ${contact.phoneNumber}:`, error);
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await contactModel.updateContactCallStats(
        contact.id,
        'failed',
        new Date(),
        this.calculateNextCallTime(contact.callAttempts + 1, campaign.retryDelay, campaign, contact)
      );
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π FreeSWITCH
   */
  private setupFreeSwitchEventHandlers(): void {
    freeswitchClient.on('call:created', this.handleCallCreated.bind(this));
    freeswitchClient.on('call:answered', this.handleCallAnswered.bind(this));
    freeswitchClient.on('call:hangup', this.handleCallHangup.bind(this));
    freeswitchClient.on('call:dtmf', this.handleCallDTMF.bind(this));
    freeswitchClient.on('call:amd_result', this.handleAMDResult.bind(this));
    freeswitchClient.on('lead:created', this.handleLeadCreatedEvent.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
   */
  private async handleCallCreated(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received call created event for unknown call: ${callUuid}`);
        return;
      }

      log.debug(`Call created: ${phoneNumber} (${callUuid})`);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞
      await webhookService.sendCallEvent('call.started', {
        callId: callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber: activeCall.phoneNumber,
        callStatus: activeCall.status,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      log.error('Error handling call created event:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
   */
  private async handleCallAnswered(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber, answerTime } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received call answered event for unknown call: ${callUuid}`);
        return;
      }

      activeCall.status = 'answered';

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      await contactModel.updateContactCallStats(
        activeCall.contactId,
        'calling',
        new Date()
      );

      log.call.answered(phoneNumber, 0, {
        callUuid,
        contactId: activeCall.contactId,
        answerTime,
      });

      this.emit('call:answered', {
        callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber,
        answerTime,
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫
      await webhookService.sendCallEvent('call.answered', {
        callId: callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber: activeCall.phoneNumber,
        callStatus: activeCall.status,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      log.error('Error handling call answered event:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
   */
  private async handleCallHangup(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber, hangupCause, callDuration, billableSeconds } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received call hangup event for unknown call: ${callUuid}`);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
      const callStatus = this.mapHangupCauseToCallStatus(hangupCause);
      const contactStatus = this.mapCallStatusToContactStatus(callStatus);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞
      await callResultModel.createCallResult({
        contactId: activeCall.contactId,
        campaignId: activeCall.campaignId,
        callUuid,
        phoneNumber,
        callStatus,
        callDuration: callDuration || 0,
        ringDuration: Math.max(0, (callDuration || 0) - (billableSeconds || 0)),
        isAnsweringMachine: false, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ AMD —Å–æ–±—ã—Ç–∏—è
        callStartedAt: activeCall.startTime,
        callEndedAt: new Date(),
        hangupCause,
      });

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
      const isSuccessful = callStatus === 'answered';
      monitoringService.trackCall(callDuration || 0, isSuccessful ? 'successful' : 'failed');

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const contact = await contactModel.getContactById(activeCall.contactId);
      const campaign = await campaignModel.getCampaignById(activeCall.campaignId);
      
      if (contact && campaign) {
        const nextCallTime = this.shouldRetryCall(contact, campaign, callStatus) 
          ? this.calculateNextCallTime(contact.callAttempts + 1, campaign.retryDelay, campaign, contact)
          : undefined;

        await contactModel.updateContactCallStats(
          activeCall.contactId,
          contactStatus,
          new Date(),
          nextCallTime
        );
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      this.activeCalls.delete(callUuid);

      log.call.failed(phoneNumber, hangupCause, {
        callUuid,
        contactId: activeCall.contactId,
        callDuration,
        billableSeconds,
      });

      this.emit('call:hangup', {
        callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber,
        hangupCause,
        callDuration,
        callStatus,
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
      const eventType = (callStatus === 'answered') ? 'call.completed' : 'call.failed';
      await webhookService.sendCallEvent(eventType, {
        callId: callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber: activeCall.phoneNumber,
        callStatus,
        duration: callDuration,
        hangupCause,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      log.error('Error handling call hangup event:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private async handleCallDTMF(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber, dtmfDigit } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received DTMF event for unknown call: ${callUuid}`);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ DTMF –æ—Ç–≤–µ—Ç–∞ (1 = –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω, 2 = –Ω–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω)
      let contactStatus: ContactStatus = 'completed';
      
      if (dtmfDigit === '1') {
        contactStatus = 'interested';
      } else if (dtmfDigit === '2') {
        contactStatus = 'not_interested';
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      await contactModel.updateContactCallStats(
        activeCall.contactId,
        contactStatus,
        new Date()
      );

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ FreeSWITCH —Å–æ–±—ã—Ç–∏–µ lead:created

      log.call.dtmf(phoneNumber, dtmfDigit, {
        callUuid,
        contactId: activeCall.contactId,
      });

      this.emit('call:dtmf', {
        callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber,
        dtmfDigit,
        contactStatus,
      });

    } catch (error) {
      log.error('Error handling DTMF event:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ AMD
   */
  private async handleAMDResult(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber, amdResult, amdConfidence } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received AMD result for unknown call: ${callUuid}`);
        return;
      }

      const isAnsweringMachine = amdResult === 'MACHINE';

      log.call.amd(phoneNumber, amdResult, amdConfidence * 100, {
        callUuid,
        contactId: activeCall.contactId,
      });

      this.emit('call:amd_result', {
        callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phoneNumber,
        amdResult,
        amdConfidence,
        isAnsweringMachine,
      });

      // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫
      if (isAnsweringMachine && config.amdEnabled) {
        await freeswitchClient.hangupCall(callUuid);
      }

    } catch (error) {
      log.error('Error handling AMD result event:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –æ—Ç FreeSWITCH
   */
  private async handleLeadCreatedEvent(event: any): Promise<void> {
    try {
      const { callUuid, phoneNumber, campaignId, dtmfResponse } = event;
      
      const activeCall = this.activeCalls.get(callUuid);
      if (!activeCall) {
        log.warn(`Received lead creation event for unknown call: ${callUuid}, phone: ${phoneNumber}`);
        return;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ Bitrix24
      await this.createBitrixLead(activeCall, dtmfResponse);

      log.info(`‚úÖ –õ–∏–¥ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ FreeSWITCH —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaignId}, —Ç–µ–ª–µ—Ñ–æ–Ω ${phoneNumber}, DTMF: ${dtmfResponse}`, {
        callUuid,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
      });

    } catch (error) {
      log.error('Error handling lead creation event:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –¥–∏–∞–ª–µ—Ä–∞
   */
  private async startActiveCampaigns(): Promise<void> {
    try {
      const activeCampaigns = await campaignModel.getActiveCampaigns();
      
      for (const campaign of activeCampaigns) {
        await this.startCampaign(campaign.id);
      }

      log.info(`Started ${activeCampaigns.length} active campaigns`);

    } catch (error) {
      log.error('Failed to start active campaigns:', error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π
   */
  private async stopAllCampaigns(): Promise<void> {
    const campaignIds = Array.from(this.campaignIntervals.keys());
    
    for (const campaignId of campaignIds) {
      await this.stopCampaign(campaignId);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
   */
  private async hangupAllActiveCalls(): Promise<void> {
    const callUuids = Array.from(this.activeCalls.keys());
    
    for (const callUuid of callUuids) {
      try {
        await freeswitchClient.hangupCall(callUuid);
      } catch (error) {
        log.warn(`Failed to hangup call ${callUuid}:`, error);
      }
    }

    this.activeCalls.clear();
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private async hangupCampaignCalls(campaignId: number): Promise<void> {
    const campaignCalls = Array.from(this.activeCalls.entries())
      .filter(([, call]) => call.campaignId === campaignId);
    
    for (const [callUuid] of campaignCalls) {
      try {
        await freeswitchClient.hangupCall(callUuid);
      } catch (error) {
        log.warn(`Failed to hangup campaign call ${callUuid}:`, error);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private isWorkingTime(campaign: Campaign): boolean {
    return timezoneService.isCampaignWorkingTime(campaign);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
   */
  private isContactInWorkingTime(campaign: Campaign, contact: Contact): boolean {
    return timezoneService.isContactWorkingTime(campaign, contact);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ (–ª–∏–º–∏—Ç –≤ –º–∏–Ω—É—Ç—É)
   */
  private canMakeCall(callsPerMinute: number): boolean {
    const now = new Date();
    const oneMinuteAgo = new Date(now.getTime() - 60000);

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    this.callsInLastMinute = this.callsInLastMinute.filter(time => time > oneMinuteAgo);

    return this.callsInLastMinute.length < callsPerMinute;
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ –≤ –º–∏–Ω—É—Ç—É
   */
  private trackCallForRateLimit(): void {
    this.callsInLastMinute.push(new Date());
  }

  /**
   * –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏
   */
  private calculateCallInterval(callsPerMinute: number): number {
    return Math.max(1000, Math.floor(60000 / callsPerMinute));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private getActiveCampaignCallsCount(campaignId: number): number {
    return Array.from(this.activeCalls.values())
      .filter(call => call.campaignId === campaignId).length;
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞
   */
  private mapHangupCauseToCallStatus(hangupCause: string): CallStatus {
    switch (hangupCause) {
      case 'NORMAL_CLEARING':
      case 'SUCCESS':
        return 'answered';
      case 'USER_BUSY':
      case 'CALL_REJECTED':
        return 'busy';
      case 'NO_ANSWER':
      case 'ORIGINATOR_CANCEL':
        return 'no_answer';
      case 'BLACKLISTED':
        return 'blacklisted';
      default:
        return 'failed';
    }
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
   */
  private mapCallStatusToContactStatus(callStatus: CallStatus): ContactStatus {
    switch (callStatus) {
      case 'answered':
        return 'completed';
      case 'busy':
      case 'no_answer':
        return 'retry';
      case 'blacklisted':
        return 'blacklisted';
      case 'failed':
      default:
        return 'failed';
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
   */
  private shouldRetryCall(contact: Contact, campaign: Campaign, callStatus: CallStatus): boolean {
    if (callStatus === 'answered' || callStatus === 'blacklisted') {
      return false;
    }

    return contact.callAttempts < campaign.retryAttempts;
  }

  /**
   * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
   */
  private calculateNextCallTime(
    attempt: number, 
    retryDelay: number, 
    campaign?: Campaign, 
    contact?: Contact
  ): Date {
    const baseDelay = retryDelay * attempt * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const nextAttemptTime = new Date(Date.now() + baseDelay);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ, —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    if (campaign && contact) {
      const nextWorkingTime = timezoneService.getNextWorkingTimeForContact(
        campaign, 
        contact, 
        nextAttemptTime
      );
      
      // –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (timezoneService.isContactWorkingTime(campaign, contact, nextAttemptTime)) {
        return nextAttemptTime;
      }
      
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
      return nextWorkingTime;
    }
    
    // Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return nextAttemptTime;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private startMonitoring(): void {
    setInterval(() => {
      this.emitStats();
      this.updateMonitoringMetrics();
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private updateMonitoringMetrics(): void {
    const stats = this.getStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º gauge –º–µ—Ç—Ä–∏–∫–∏
    monitoringService.getGauge('active_calls')?.set(stats.activeCalls);
    monitoringService.getGauge('active_campaigns')?.set(stats.activeCampaigns);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    monitoringService.recordMetric({
      name: 'dialer_calls_per_minute',
      value: stats.callsPerMinute,
      type: 'gauge'
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è health checks
   */
  private registerHealthChecks(): void {
    // Health check –¥–ª—è –¥–∏–∞–ª–µ—Ä–∞
    monitoringService.registerHealthCheck('dialer', async () => {
      const start = Date.now();
      const status = this.getStatus();
      
      const isHealthy = status.isRunning && status.freeswitchConnected;
      
      return {
        name: 'dialer',
        status: isHealthy ? 'healthy' : 'unhealthy',
        message: isHealthy ? '–î–∏–∞–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ' : '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏–∞–ª–µ—Ä–æ–º –∏–ª–∏ FreeSWITCH',
        duration: Date.now() - start,
        timestamp: new Date(),
        details: {
          isRunning: status.isRunning,
          freeswitchConnected: status.freeswitchConnected,
          activeCalls: status.activeCalls,
          activeCampaigns: status.activeCampaigns
        }
      };
    });

    // Health check –¥–ª—è FreeSWITCH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    monitoringService.registerHealthCheck('freeswitch', async () => {
      const start = Date.now();
      const connectionStatus = freeswitchClient.getConnectionStatus();
      
      return {
        name: 'freeswitch',
        status: connectionStatus.connected ? 'healthy' : 'unhealthy',
        message: connectionStatus.connected 
          ? 'FreeSWITCH –ø–æ–¥–∫–ª—é—á–µ–Ω' 
          : 'FreeSWITCH –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        duration: Date.now() - start,
        timestamp: new Date(),
        details: connectionStatus
      };
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private emitStats(): void {
    const stats: DialerStats = {
      activeCalls: this.activeCalls.size,
      totalCallsToday: 0, // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î
      successfulCallsToday: 0, // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î  
      failedCallsToday: 0, // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ë–î
      callsPerMinute: this.callsInLastMinute.length,
      activeCampaigns: this.campaignIntervals.size,
    };

    this.emit('stats', stats);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–µ—Ä–∞
   */
  getStats(): DialerStats {
    return {
      activeCalls: this.activeCalls.size,
      totalCallsToday: 0,
      successfulCallsToday: 0,
      failedCallsToday: 0,
      callsPerMinute: this.callsInLastMinute.length,
      activeCampaigns: this.campaignIntervals.size,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
   */
  getActiveCalls(): ActiveCall[] {
    return Array.from(this.activeCalls.values());
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–µ—Ä–∞
   */
  getStatus(): {
    isRunning: boolean;
    activeCalls: number;
    activeCampaigns: number;
    freeswitchConnected: boolean;
  } {
    return {
      isRunning: this.isRunning,
      activeCalls: this.activeCalls.size,
      activeCampaigns: this.campaignIntervals.size,
      freeswitchConnected: freeswitchClient.getConnectionStatus().connected,
    };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ Bitrix24 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å DTMF –æ—Ç–≤–µ—Ç–æ–º
   */
  private async createBitrixLead(activeCall: ActiveCall, dtmfResponse: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ
      const [campaign, contact] = await Promise.all([
        campaignModel.getCampaignById(activeCall.campaignId),
        contactModel.getContactById(activeCall.contactId)
      ]);

      if (!campaign || !contact) {
        log.warn(`Cannot create Bitrix lead: campaign or contact not found`, {
          campaignId: activeCall.campaignId,
          contactId: activeCall.contactId,
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
      if (!campaign.bitrixCreateLeads) {
        log.debug(`Bitrix24 integration disabled for campaign ${campaign.name}`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bitrix24
      const authStatus = bitrix24Service.getAuthStatus();
      if (!authStatus.isConfigured || !authStatus.hasTokens || !authStatus.isTokenValid) {
        log.warn('Bitrix24 not configured or tokens invalid, skipping lead creation');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
      const leadParams: any = {
        title: `–õ–∏–¥ –∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaign.name}`,
        name: contact.firstName || '',
        lastName: contact.lastName || '',
        phone: contact.phoneNumber,
        email: contact.email || '',
        sourceId: campaign.bitrixSourceId || 'CALL',
        campaignName: campaign.name,
        dtmfResponse,
        comments: `–¢–µ–ª–µ—Ñ–æ–Ω: ${contact.phoneNumber}\n–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞: ${new Date().toLocaleString('ru-RU')}`,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º responsibleId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω  
      if (campaign.bitrixResponsibleId && typeof campaign.bitrixResponsibleId === 'number') {
        leadParams.responsibleId = campaign.bitrixResponsibleId;
      }

      // –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ Bitrix24
      const bitrixLead = await bitrix24Service.createLead(leadParams);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–∏–¥–∞
      await contactModel.updateContact(contact.id, {
        bitrixLeadId: bitrixLead.id,
      });

      log.info(`‚úÖ Bitrix24 –ª–∏–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`, {
        leadId: bitrixLead.id,
        campaignName: campaign.name,
        phone: contact.phoneNumber,
        dtmfResponse,
      });

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
      monitoringService.trackLeadCreated();

      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
      this.emit('bitrix:lead_created', {
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        leadId: bitrixLead.id,
        phone: contact.phoneNumber,
        dtmfResponse,
      });

    } catch (error: any) {
      log.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞ –≤ Bitrix24:', {
        error: error.message,
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phone: activeCall.phoneNumber,
        dtmfResponse,
      });

      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
      this.emit('bitrix:lead_error', {
        campaignId: activeCall.campaignId,
        contactId: activeCall.contactId,
        phone: activeCall.phoneNumber,
        error: error.message,
        dtmfResponse,
      });
    }
  }
}

/**
 * Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞–ª–µ—Ä–∞
 */
export const dialerService = new DialerService(); 