/**
 * Asterisk –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è VoIPProvider –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Asterisk —á–µ—Ä–µ–∑ AMI
 */

import { EventEmitter } from 'events';
import AsteriskManager from 'asterisk-manager';
import { log } from '@/utils/logger';
import { 
  VoIPProvider, 
  VoIPConnectionStatus, 
  VoIPStats,
  VoIPCallCreatedEvent,
  VoIPCallAnsweredEvent,
  VoIPCallHangupEvent,
  VoIPCallDTMFEvent,
  VoIPLeadCreatedEvent
} from '../voip-provider';

interface AsteriskEvent {
  event: string;
  uniqueid?: string;
  channel?: string;
  calleridnum?: string;
  calleridname?: string;
  context?: string;
  exten?: string;
  priority?: string;
  application?: string;
  data?: string;
  cause?: string;
  causeTxt?: string;
  duration?: string;
  billableseconds?: string;
  digit?: string;
  [key: string]: any;
}

export class AsteriskAdapter extends EventEmitter implements VoIPProvider {
  private amiClient: any = null;
  private connected: boolean = false;
  private reconnectAttempts: number = 0;
  private maxReconnectAttempts: number = 10;
  private reconnectDelay: number = 5000;
  private reconnectTimer: NodeJS.Timeout | null = null;

  constructor(private config: { host: string; port: number; username: string; password: string }) {
    super();
    log.info('üÜï AsteriskAdapter: Initializing Asterisk adapter');
    log.info(`üîß Config: ${this.config.host}:${this.config.port} (user: ${this.config.username})`);
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Asterisk AMI
   */
  async connect(): Promise<void> {
    try {
      if (this.connected) {
        log.warn('AsteriskAdapter: Already connected to Asterisk AMI');
        return;
      }

      log.info('üîå AsteriskAdapter: Connecting to Asterisk AMI...');
      log.info(`üì° Host: ${this.config.host}:${this.config.port}, User: ${this.config.username}`);
      
      // –°–æ–∑–¥–∞–µ–º AMI –∫–ª–∏–µ–Ω—Ç
      this.amiClient = new AsteriskManager(
        this.config.port,
        this.config.host,
        this.config.username,
        this.config.password,
        true // –°–æ–±—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω—ã
      );

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      this.amiClient.keepConnected();

      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          log.error(`‚ùå AsteriskAdapter: Connection timeout after 10s to ${this.config.host}:${this.config.port}`);
          reject(new Error('Asterisk AMI connection timeout'));
        }, 10000);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.amiClient.on('connect', () => {
          clearTimeout(timeout);
          this.connected = true;
          this.reconnectAttempts = 0;
          
          log.info('‚úÖ AsteriskAdapter: Connected to Asterisk AMI successfully');
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          this.setupEventHandlers();
          
          this.emit('connected');
          resolve();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.amiClient.on('error', (error: Error) => {
          clearTimeout(timeout);
          this.connected = false;
          
          log.error(`‚ùå AsteriskAdapter: AMI connection error: ${error.message}`);
          this.emit('error', error);
          
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          this.scheduleReconnect();
          
          reject(error);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        this.amiClient.on('disconnect', () => {
          this.connected = false;
          log.warn('üîå AsteriskAdapter: Disconnected from Asterisk AMI');
          this.emit('disconnected');
          
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          this.scheduleReconnect();
        });
      });
      
    } catch (error) {
      log.error('‚ùå AsteriskAdapter: Failed to connect to Asterisk:', error);
      this.connected = false;
      this.emit('error', error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Asterisk
   */
  disconnect(): void {
    try {
      // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (this.reconnectTimer) {
        clearTimeout(this.reconnectTimer);
        this.reconnectTimer = null;
      }

      if (this.amiClient) {
        log.info('üîå AsteriskAdapter: Disconnecting from Asterisk AMI...');
        this.amiClient.disconnect();
        this.amiClient = null;
      }
      
      this.connected = false;
      this.emit('disconnected');
      log.info('‚úÖ AsteriskAdapter: Disconnected from Asterisk');
    } catch (error) {
      log.error('‚ùå AsteriskAdapter: Error during disconnect:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  isConnected(): boolean {
    return this.connected;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Asterisk
   */
  async makeCall(phoneNumber: string, campaignId: number, audioFilePath?: string): Promise<string> {
    if (!this.connected || !this.amiClient) {
      throw new Error('AsteriskAdapter: Not connected to Asterisk AMI');
    }

    try {
      log.info(`üìû AsteriskAdapter: Making call to ${phoneNumber} (campaign: ${campaignId})`);
      
      const callUuid = this.generateUUID();
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const normalizedNumber = phoneNumber.replace(/^\+/, '');
      
      // Asterisk Originate action
      const originateAction = {
        Action: 'Originate',
        Channel: `PJSIP/${normalizedNumber}@trunk`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π trunk (62.141.121.197:5070)
        Context: 'campaign-calls', // –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ –¥–∏–∞–ª–ø–ª–∞–Ω–µ
        Exten: campaignId.toString(), // Extension = ID –∫–∞–º–ø–∞–Ω–∏–∏
        Priority: 1,
        Variables: {
          CAMPAIGN_ID: campaignId,
          PHONE_NUMBER: phoneNumber,
          CALL_UUID: callUuid,
          NORMALIZED_NUMBER: normalizedNumber,
          SIP_PROVIDER: '62.141.121.197:5070',
          ...(audioFilePath && { AUDIO_FILE: audioFilePath })
        },
        ChannelId: callUuid, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à UUID –∫–∞–∫ Channel ID
        Timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        CallerID: process.env.SIP_CALLER_ID_NUMBER || '74951234567' // –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
      };

      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          log.error(`‚ùå AsteriskAdapter: Originate timeout for ${phoneNumber}`);
          reject(new Error(`Asterisk Originate timeout for ${phoneNumber}`));
        }, 35000);

        this.amiClient.action(originateAction, (err: any, res: any) => {
          clearTimeout(timeout);
          
          if (err) {
            log.error(`‚ùå AsteriskAdapter: Originate failed for ${phoneNumber}:`, err);
            reject(new Error(`Asterisk Originate failed: ${err.message || err}`));
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç Asterisk
          if (res && res.response === 'Success') {
            log.info(`‚úÖ AsteriskAdapter: Originate success for ${phoneNumber}, UUID: ${callUuid}`);
            resolve(callUuid);
          } else {
            const errorMsg = res?.message || 'Unknown Asterisk error';
            log.error(`‚ùå AsteriskAdapter: Originate failed for ${phoneNumber}: ${errorMsg}`);
            reject(new Error(`Asterisk Originate failed: ${errorMsg}`));
          }
        });
      });
      
    } catch (error) {
      log.error(`‚ùå AsteriskAdapter: Failed to make call to ${phoneNumber}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
   */
  async hangupCall(callUuid: string): Promise<void> {
    if (!this.connected || !this.amiClient) {
      throw new Error('AsteriskAdapter: Not connected to Asterisk AMI');
    }

    try {
      log.info(`üìû AsteriskAdapter: Hanging up call ${callUuid}`);
      
      const hangupAction = {
        Action: 'Hangup',
        Channel: callUuid, // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –∫–∞–∫ Channel ID
        Cause: 16 // Normal Clearing
      };

      return new Promise((resolve, _reject) => {
        const timeout = setTimeout(() => {
          log.warn(`‚ö†Ô∏è AsteriskAdapter: Hangup timeout for ${callUuid}, continuing...`);
          resolve(); // –ù–µ —Å—á–∏—Ç–∞–µ–º timeout –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
        }, 10000);

        this.amiClient.action(hangupAction, (err: any, res: any) => {
          clearTimeout(timeout);
          
          if (err) {
            log.warn(`‚ö†Ô∏è AsteriskAdapter: Hangup warning for ${callUuid}:`, err);
            // –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É hangup –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π - –∑–≤–æ–Ω–æ–∫ –º–æ–∂–µ—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
            resolve();
            return;
          }

          if (res && (res.response === 'Success' || res.response === 'Error')) {
            // Error –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ –∫–∞–Ω–∞–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            log.info(`‚úÖ AsteriskAdapter: Hangup completed for ${callUuid}`);
            resolve();
          } else {
            log.warn(`‚ö†Ô∏è AsteriskAdapter: Unexpected hangup response for ${callUuid}:`, res);
            resolve(); // –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
          }
        });
      });
      
    } catch (error) {
      log.error(`‚ùå AsteriskAdapter: Failed to hangup call ${callUuid}:`, error);
      // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - hangup –Ω–µ –¥–æ–ª–∂–µ–Ω –ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  getConnectionStatus(): VoIPConnectionStatus {
    const status: VoIPConnectionStatus = {
      connected: this.connected,
      reconnectAttempts: this.reconnectAttempts,
      maxReconnectAttempts: this.maxReconnectAttempts,
    };
    
    if (!this.connected) {
      status.lastError = 'AsteriskAdapter not implemented yet';
    }
    
    return status;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Asterisk
   */
  async getStats(): Promise<VoIPStats> {
    if (!this.connected || !this.amiClient) {
      throw new Error('AsteriskAdapter: Not connected to Asterisk AMI');
    }

    try {
      log.debug('üìä AsteriskAdapter: Getting Asterisk stats...');

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
      const channelsPromise = new Promise<number>((resolve) => {
        this.amiClient.action({ Action: 'CoreShowChannels' }, (err: any, res: any) => {
          if (err) {
            log.warn('‚ö†Ô∏è AsteriskAdapter: Failed to get channels count:', err);
            resolve(0);
            return;
          }
          
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
          const channelsCount = res?.events ? res.events.length : 0;
          resolve(channelsCount);
        });
      });

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
      const uptimePromise = new Promise<number>((resolve) => {
        this.amiClient.action({ Action: 'CoreSettings' }, (err: any, res: any) => {
          if (err) {
            log.warn('‚ö†Ô∏è AsteriskAdapter: Failed to get uptime:', err);
            resolve(0);
            return;
          }
          
          // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
          const uptimeStr = res?.systemname || res?.uptime || '0';
          const uptime = parseInt(uptimeStr, 10) || 0;
          resolve(uptime);
        });
      });

      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [activeChannels, uptime] = await Promise.all([channelsPromise, uptimePromise]);
      
      // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      // –í Asterisk –æ–¥–∏–Ω –∑–≤–æ–Ω–æ–∫ = –¥–≤–∞ –∫–∞–Ω–∞–ª–∞ (–≤—Ö–æ–¥—è—â–∏–π –∏ –∏—Å—Ö–æ–¥—è—â–∏–π)
      const activeCalls = Math.floor(activeChannels / 2);

      const stats: VoIPStats = {
        activeCalls,
        activeChannels,
        uptime,
        connected: this.connected,
      };

      log.debug('‚úÖ AsteriskAdapter: Stats retrieved:', stats);
      return stats;
      
    } catch (error) {
      log.error('‚ùå AsteriskAdapter: Failed to get stats:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã Asterisk
   */
  async sendCommand(command: string): Promise<any> {
    if (!this.connected || !this.amiClient) {
      throw new Error('AsteriskAdapter: Not connected to Asterisk AMI');
    }

    try {
      log.debug(`üîß AsteriskAdapter: Sending command: ${command}`);
      
      const commandAction = {
        Action: 'Command',
        Command: command
      };

      return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          log.error(`‚ùå AsteriskAdapter: Command timeout: ${command}`);
          reject(new Error(`Asterisk command timeout: ${command}`));
        }, 30000);

        this.amiClient.action(commandAction, (err: any, res: any) => {
          clearTimeout(timeout);
          
          if (err) {
            log.error(`‚ùå AsteriskAdapter: Command failed: ${command}`, err);
            reject(new Error(`Asterisk command failed: ${err.message || err}`));
            return;
          }

          log.debug(`‚úÖ AsteriskAdapter: Command executed: ${command}`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã
          resolve({
            success: true,
            command,
            response: res?.response || 'Success',
            output: res?.output || res?.message || '',
            data: res
          });
        });
      });
      
    } catch (error) {
      log.error(`‚ùå AsteriskAdapter: Failed to send command ${command}:`, error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Asterisk AMI
   */
  private setupEventHandlers(): void {
    if (!this.amiClient) {
      log.warn('‚ö†Ô∏è AsteriskAdapter: No AMI client for event handlers setup');
      return;
    }

    log.info('üéõÔ∏è AsteriskAdapter: Setting up AMI event handlers...');

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π AMI
    this.amiClient.on('managerevent', (event: AsteriskEvent) => {
      try {
        this.handleAsteriskEvent(event);
      } catch (error) {
        log.error('‚ùå AsteriskAdapter: Error handling AMI event:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ AMI
    this.amiClient.on('error', (error: Error) => {
      log.error('‚ùå AsteriskAdapter: AMI error:', error);
      this.emit('error', error);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AMI
    this.amiClient.on('reconnect', () => {
      log.info('üîÑ AsteriskAdapter: AMI reconnected');
      this.connected = true;
      this.reconnectAttempts = 0;
      this.emit('connected');
    });

    log.info('‚úÖ AsteriskAdapter: Event handlers setup completed');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Asterisk AMI
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è AMI –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VoIP
   */
  private handleAsteriskEvent(event: AsteriskEvent): void {
    const eventName = event.event;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ª–æ–≥–∏
    if (['Newchannel', 'DialBegin', 'DialEnd', 'Hangup', 'DTMFEnd'].includes(eventName)) {
      log.debug(`üéõÔ∏è AsteriskAdapter: Received AMI event: ${eventName}`, {
        uniqueid: event.uniqueid,
        channel: event.channel,
        calleridnum: event.calleridnum
      });
    }

    try {
      switch (eventName) {
        case 'Newchannel':
          this.handleNewChannelEvent(event);
          break;
          
        case 'DialBegin':
          this.handleDialBeginEvent(event);
          break;
          
        case 'DialEnd':
          this.handleDialEndEvent(event);
          break;
          
        case 'Hangup':
          this.handleHangupEvent(event);
          break;
          
        case 'DTMFEnd':
          this.handleDTMFEvent(event);
          break;
          
        case 'VarSet':
          this.handleVarSetEvent(event);
          break;
          
        default:
          // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ - –∏—Ö –º–Ω–æ–≥–æ
          if (eventName && !['Registry', 'PeerStatus', 'ExtensionStatus'].includes(eventName)) {
            log.debug(`üîç AsteriskAdapter: Unhandled AMI event: ${eventName}`);
          }
          break;
      }
    } catch (error) {
      log.error(`‚ùå AsteriskAdapter: Error processing AMI event ${eventName}:`, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
   */
  private handleNewChannelEvent(event: AsteriskEvent): void {
    if (!event.uniqueid || !event.channel) {
      return;
    }

    // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
    const voipEvent: VoIPCallCreatedEvent = {
      callUuid: event.uniqueid,
      phoneNumber: event.calleridnum || 'unknown',
      timestamp: new Date(),
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º callerIdNumber —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (event.calleridnum) {
      voipEvent.callerIdNumber = event.calleridnum;
    }

    log.debug('üìû AsteriskAdapter: Call created', voipEvent);
    this.emit('call:created', voipEvent);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞–ª–∞ –¥–æ–∑–≤–æ–Ω–∞
   */
  private handleDialBeginEvent(event: AsteriskEvent): void {
    if (!event.uniqueid) {
      return;
    }

    // –í Asterisk DialBegin –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –¥–æ–∑–≤–æ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç
    log.debug(`üìû AsteriskAdapter: Dial begin for ${event.uniqueid}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∑–≤–æ–Ω–∞ (–æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—É–¥–∞—á–∞)
   */
  private handleDialEndEvent(event: AsteriskEvent): void {
    if (!event.uniqueid) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∑–≤–æ–Ω–∞
    const dialStatus = event.dialstatus;
    
    if (dialStatus === 'ANSWER') {
      // –ó–≤–æ–Ω–æ–∫ –æ—Ç–≤–µ—á–µ–Ω
      const voipEvent: VoIPCallAnsweredEvent = {
        callUuid: event.uniqueid,
        phoneNumber: event.calleridnum || 'unknown',
        answerTime: new Date(),
        timestamp: new Date(),
      };

      log.debug('üìû AsteriskAdapter: Call answered', voipEvent);
      this.emit('call:answered', voipEvent);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
   */
  private handleHangupEvent(event: AsteriskEvent): void {
    if (!event.uniqueid) {
      return;
    }

    const voipEvent: VoIPCallHangupEvent = {
      callUuid: event.uniqueid,
      phoneNumber: event.calleridnum || 'unknown',
      hangupCause: event.causeTxt || event.cause || 'Unknown',
      callDuration: parseInt(event.duration || '0', 10),
      billableSeconds: parseInt(event.billableseconds || '0', 10),
      timestamp: new Date(),
    };

    log.debug('üìû AsteriskAdapter: Call hangup', voipEvent);
    this.emit('call:hangup', voipEvent);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ DTMF —Å–æ–±—ã—Ç–∏–π
   */
  private handleDTMFEvent(event: AsteriskEvent): void {
    if (!event.uniqueid || !event.digit) {
      return;
    }

    const voipEvent: VoIPCallDTMFEvent = {
      callUuid: event.uniqueid,
      phoneNumber: event.calleridnum || 'unknown',
      dtmfDigit: event.digit,
      timestamp: new Date(),
    };

    log.debug('üìû AsteriskAdapter: DTMF received', voipEvent);
    this.emit('call:dtmf', voipEvent);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π)
   */
  private handleVarSetEvent(event: AsteriskEvent): void {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∏–∞–ª–µ—Ä–æ–º
    if (event.variable === 'DIALER_LEAD_CREATED' && event.value === '1') {
      // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
      const voipEvent: VoIPLeadCreatedEvent = {
        callUuid: event.uniqueid || 'unknown',
        phoneNumber: event.calleridnum || 'unknown',
        campaignId: parseInt(event.value || '0', 10),
        dtmfResponse: '1', // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        callResult: 'interested',
        timestamp: new Date(),
      };

      log.debug('üìû AsteriskAdapter: Lead created', voipEvent);
      this.emit('lead:created', voipEvent);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AMI
   */
  private scheduleReconnect(): void {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º memory leak - –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if (this.connected) {
      return;
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      log.error(`‚ùå AsteriskAdapter: Max reconnection attempts (${this.maxReconnectAttempts}) reached`);
      this.emit('error', new Error('Max AMI reconnection attempts reached'));
      return;
    }

    if (this.reconnectTimer) {
      clearTimeout(this.reconnectTimer);
    }

    this.reconnectAttempts++;
    const delay = Math.min(this.reconnectDelay * this.reconnectAttempts, 30000); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫

    log.info(`üîÑ AsteriskAdapter: Scheduling reconnect attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`);

    this.reconnectTimer = setTimeout(async () => {
      // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      if (this.connected) {
        return;
      }
      
      try {
        log.info('üîÑ AsteriskAdapter: Attempting to reconnect to AMI...');
        await this.connect();
      } catch (error) {
        log.warn('‚ö†Ô∏è AsteriskAdapter: Reconnection attempt failed:', error);
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã - –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        if (!this.connected) {
          this.scheduleReconnect();
        }
      }
    }, delay);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
   */
  private generateUUID(): string {
    return require('crypto').randomUUID();
  }
} 