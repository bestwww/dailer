/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É FreeSWITCH –∏ Asterisk
 */

import { VoIPProvider, VoIPConfig, VoIPProviderType } from './voip-provider';
import { FreeSwitchAdapter } from './adapters/freeswitch-adapter';
import { AsteriskAdapter } from './adapters/asterisk-adapter';
import { config } from '@/config';
import { log } from '@/utils/logger';

export class VoIPProviderFactory {
  private static instance: VoIPProvider | null = null;

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  static create(voipConfig: VoIPConfig): VoIPProvider {
    log.info(`üè≠ VoIPProviderFactory: Creating ${voipConfig.provider} provider`);

    switch (voipConfig.provider) {
      case 'freeswitch':
        if (!voipConfig.freeswitch) {
          throw new Error('FreeSWITCH configuration is required when provider is "freeswitch"');
        }
        
        log.info('üî• VoIPProviderFactory: Creating FreeSWITCH adapter');
        return new FreeSwitchAdapter(voipConfig.freeswitch);

      case 'asterisk':
        if (!voipConfig.asterisk) {
          throw new Error('Asterisk configuration is required when provider is "asterisk"');
        }
        
        log.info('üÜï VoIPProviderFactory: Creating Asterisk adapter');
        return new AsteriskAdapter(voipConfig.asterisk);

      default:
        throw new Error(`Unsupported VoIP provider: ${voipConfig.provider}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (singleton)
   */
  static createFromConfig(): VoIPProvider {
    if (VoIPProviderFactory.instance) {
      return VoIPProviderFactory.instance;
    }

    const voipConfig = VoIPProviderFactory.buildConfigFromEnv();
    VoIPProviderFactory.instance = VoIPProviderFactory.create(voipConfig);
    
    log.info(`‚úÖ VoIPProviderFactory: Created ${voipConfig.provider} provider instance`);
    return VoIPProviderFactory.instance;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  private static buildConfigFromEnv(): VoIPConfig {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º FreeSWITCH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const provider = (process.env.VOIP_PROVIDER as VoIPProviderType) || 'freeswitch';
    
    log.info(`üîß VoIPProviderFactory: Building config for provider: ${provider}`);

    const voipConfig: VoIPConfig = {
      provider,
      freeswitch: {
        host: config.freeswitchHost,
        port: config.freeswitchPort,
        password: config.freeswitchPassword,
      },
      asterisk: {
        host: process.env.ASTERISK_HOST || 'asterisk',
        port: parseInt(process.env.ASTERISK_PORT || '5038'),
        username: process.env.ASTERISK_USERNAME || 'admin',
        password: process.env.ASTERISK_PASSWORD || 'admin',
      },
    };

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
    log.info('üìã VoIPProviderFactory: Configuration:', {
      provider: voipConfig.provider,
      freeswitch: voipConfig.freeswitch ? {
        host: voipConfig.freeswitch.host,
        port: voipConfig.freeswitch.port,
        password: '[HIDDEN]'
      } : undefined,
      asterisk: voipConfig.asterisk ? {
        host: voipConfig.asterisk.host,
        port: voipConfig.asterisk.port,
        username: voipConfig.asterisk.username,
        password: '[HIDDEN]'
      } : undefined,
    });

    return voipConfig;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω)
   */
  static getCurrentProvider(): VoIPProvider | null {
    return VoIPProviderFactory.instance;
  }

  /**
   * –°–±—Ä–æ—Å singleton (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static reset(): void {
    if (VoIPProviderFactory.instance) {
      VoIPProviderFactory.instance.disconnect();
      VoIPProviderFactory.instance = null;
    }
    log.info('üîÑ VoIPProviderFactory: Instance reset');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  static async testProvider(providerType: VoIPProviderType): Promise<boolean> {
    try {
      log.info(`üß™ VoIPProviderFactory: Testing ${providerType} provider`);
      
      const testConfig: VoIPConfig = {
        provider: providerType,
        ...VoIPProviderFactory.buildConfigFromEnv()
      };
      
      const provider = VoIPProviderFactory.create(testConfig);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      await provider.connect();
      const isConnected = provider.isConnected();
      
      // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
      provider.disconnect();
      
      log.info(`‚úÖ VoIPProviderFactory: ${providerType} test result: ${isConnected}`);
      return isConnected;
      
    } catch (error) {
      log.error(`‚ùå VoIPProviderFactory: ${providerType} test failed:`, error);
      return false;
    }
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ VoIP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
export function getVoIPProvider(): VoIPProvider {
  return VoIPProviderFactory.createFromConfig();
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function switchVoIPProvider(newProvider: VoIPProviderType): Promise<VoIPProvider> {
  log.info(`üîÑ Switching VoIP provider to: ${newProvider}`);
  
  // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  const currentProvider = VoIPProviderFactory.getCurrentProvider();
  if (currentProvider) {
    currentProvider.disconnect();
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º singleton
  VoIPProviderFactory.reset();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  process.env.VOIP_PROVIDER = newProvider;
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  const newProviderInstance = VoIPProviderFactory.createFromConfig();
  await newProviderInstance.connect();
  
  log.info(`‚úÖ Successfully switched to ${newProvider} provider`);
  return newProviderInstance;
} 