#!/bin/bash

# –î–û–ë–ê–í–õ–ï–ù–ò–ï JWT_SECRET - –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîê –î–û–ë–ê–í–õ–ï–ù–ò–ï JWT_SECRET - –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï"

log "‚úÖ –ù–ï–í–ï–†–û–Ø–¢–ù–´–ô –ü–†–û–ì–†–ï–°–°:"
echo "  üéØ TypeScript path alias –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
echo "  üìù DATABASE_URL –¥–æ–±–∞–≤–ª–µ–Ω"
echo "  üî¥ REDIS_URL –¥–æ–±–∞–≤–ª–µ–Ω" 
echo "  üìû ASTERISK_URL –¥–æ–±–∞–≤–ª–µ–Ω"
echo "  üîê –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ JWT_SECRET (min 32 chars)"

log "üîê –ì–ï–ù–ï–†–ò–†–£–ï–ú –ò –î–û–ë–ê–í–õ–Ø–ï–ú JWT_SECRET..."

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π JWT —Å–µ–∫—Ä–µ—Ç (64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
JWT_SECRET=$(openssl rand -hex 32)
log "  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JWT_SECRET: ${JWT_SECRET:0:8}..."

# –î–æ–±–∞–≤–ª—è–µ–º JWT_SECRET –ø–æ—Å–ª–µ ASTERISK_URL
sed -i "/ASTERISK_URL=ami/a\\      - JWT_SECRET=$JWT_SECRET" docker-compose-ready.yml

# –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if ! grep -q "JWT_EXPIRES_IN" docker-compose-ready.yml; then
    sed -i "/JWT_SECRET=/a\\      - JWT_EXPIRES_IN=24h" docker-compose-ready.yml
fi

if ! grep -q "LOG_LEVEL" docker-compose-ready.yml; then
    sed -i "/JWT_EXPIRES_IN=/a\\      - LOG_LEVEL=info" docker-compose-ready.yml
fi

log "üìä –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:"
echo "=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BACKEND ==="
grep -A 30 "environment:" docker-compose-ready.yml | grep -E "(DATABASE_URL|REDIS_URL|ASTERISK_URL|JWT_SECRET|NODE_ENV)"

log "üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend
docker compose -f docker-compose-ready.yml stop backend

# –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
docker compose -f docker-compose-ready.yml rm -f backend

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
docker compose -f docker-compose-ready.yml up -d backend

log "‚è∞ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ (60 —Å–µ–∫—É–Ω–¥)..."

sleep 10

for i in {1..10}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 20 2>&1)
        
        if echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: $ERROR_MSG"
        else
            log "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç
            if echo "$LOGS" | grep -q -E "(Server.*listening|started|ready)"; then
                log "‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç!"
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
                sleep 5
                if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                    log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                    
                    echo ""
                    echo "üéâ üéâ üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%! üéâ üéâ üéâ"
                    echo ""
                    echo "‚úÖ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢:"
                    echo "  üéØ TypeScript path alias –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
                    echo "  üìù DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                    echo "  üî¥ REDIS_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                    echo "  üìû ASTERISK_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                    echo "  üîê JWT_SECRET —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                    echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                    echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                    echo ""
                    echo "üåê –î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ò–°–´:"
                    echo "  Frontend:     http://localhost:3000"
                    echo "  Backend API:  http://localhost:3001/health"
                    echo "  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                    echo "  PostgreSQL:   docker exec -it dialer_postgres_ready psql -U dialer -d dialer"
                    echo "  Redis CLI:    docker exec -it dialer_redis_ready redis-cli"
                    echo ""
                    echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ü–û–õ–ù–û–°–¢–¨–Æ!"
                    echo ""
                    echo "üéØ VoIP –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
                    echo ""
                    echo "üìä –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
                    docker compose -f docker-compose-ready.yml ps
                    
                    echo ""
                    echo "üöÄ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ SIP –ó–í–û–ù–ö–û–í:"
                    echo "  1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000"
                    echo "  2. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Backend API: curl http://localhost:3001/health"
                    echo "  3. üìû –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SIP trunk (IP: 62.141.121.197:5070)"
                    echo "  4. üéØ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                    echo "  5. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: curl http://localhost:3001/api/stats"
                    
                    echo ""
                    echo "üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!"
                    
                    exit 0
                else
                    log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (${i}*5 —Å–µ–∫)"
                fi
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç (${i}*5 —Å–µ–∫)"
            fi
        fi
    else
        log "üìä Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..."

echo ""
echo "üìù –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ backend:"
docker logs dialer_backend_ready

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üîß –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è backend:"
if docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" | grep -q "Up"; then
    docker exec dialer_backend_ready printenv | sort
else
    echo "Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
fi

echo ""
log "üí° –ï–°–õ–ò –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏: docker logs dialer_backend_ready"
echo "  2. –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: docker run --rm -it --network dialer-ready_dialer_network dailer-backend-fixed:latest node dist/app.js"
echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: grep -A 30 'environment:' docker-compose-ready.yml"

exit 1 