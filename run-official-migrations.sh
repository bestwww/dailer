#!/bin/bash

# –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–§–ò–¶–ò–ê–õ–¨–ù–´–• SQL –ú–ò–ì–†–ê–¶–ò–ô

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üóÑÔ∏è –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–§–ò–¶–ò–ê–õ–¨–ù–´–• –ú–ò–ì–†–ê–¶–ò–ô!"

log "‚úÖ –û–¢–õ–ò–ß–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:"
echo "  ‚úÖ –ù–∞–π–¥–µ–Ω—ã 7 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö SQL –º–∏–≥—Ä–∞—Ü–∏–π –≤ database/migrations/"
echo "  ‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç backend/src/scripts/migrate.ts"
echo "  ‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã: users, campaigns, contacts, call_results"
echo "  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç blacklist, webhooks –∏ –ø–æ–ª–µ–π"
echo "  üéØ –†–ï–®–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"

log "üîß –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –ú–ò–ì–†–ê–¶–ò–ô..."

echo "=== –°–ü–ò–°–û–ö –í–°–ï–• –ú–ò–ì–†–ê–¶–ò–ô ==="
ls -la database/migrations/ | grep -E "\\.sql$"

echo ""
echo "=== –ü–û–†–Ø–î–û–ö –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ô ==="
MIGRATION_FILES=($(ls database/migrations/*.sql | sort))
for file in "${MIGRATION_FILES[@]}"; do
    echo "$(basename $file): $(head -2 $file | tail -1 | sed 's/^-- //')"
done

log "üîß –®–ê–ì 2: –û–ß–ò–°–¢–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–ô –°–•–ï–ú–´..."

echo "=== –£–î–ê–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–ê–ë–õ–ò–¶ ==="
docker exec dialer_postgres_ready psql -U dialer -d dialer -c "
DROP TABLE IF EXISTS webhook_delivery_logs CASCADE;
DROP TABLE IF EXISTS webhook_endpoints CASCADE;
DROP TABLE IF EXISTS token_blacklist CASCADE;
DROP TABLE IF EXISTS blacklist CASCADE;
DROP TABLE IF EXISTS call_results CASCADE;
DROP TABLE IF EXISTS contacts CASCADE;
DROP TABLE IF EXISTS campaigns CASCADE;
DROP TABLE IF EXISTS users CASCADE;
" 2>&1

echo "‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã"

log "üóÑÔ∏è –®–ê–ì 3: –í–´–ü–û–õ–ù–ï–ù–ò–ï –í–°–ï–• –ú–ò–ì–†–ê–¶–ò–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û..."

for migration_file in "${MIGRATION_FILES[@]}"; do
    migration_name=$(basename "$migration_file")
    log "  –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: $migration_name"
    
    echo "=== –í–´–ü–û–õ–ù–ï–ù–ò–ï: $migration_name ==="
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    RESULT=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -f "/host$(realpath "$migration_file")" 2>&1)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø—Ä—è–º—É—é, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if echo "$RESULT" | grep -q "No such file"; then
        echo "–ö–æ–ø–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker cp "$migration_file" dialer_postgres_ready:/tmp/current_migration.sql
        RESULT=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -f /tmp/current_migration.sql 2>&1)
    fi
    
    if echo "$RESULT" | grep -q "ERROR"; then
        log "  ‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–≥—Ä–∞—Ü–∏–∏ $migration_name:"
        echo "$RESULT" | grep "ERROR" | head -3
    else
        log "  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è $migration_name –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    fi
    
    sleep 1
done

log "üîß –®–ê–ì 4: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–ô –°–•–ï–ú–´..."

echo "=== –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–û–ó–î–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶ ==="
TABLES_RESULT=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt" 2>&1)
echo "$TABLES_RESULT"

echo ""
echo "=== –ü–û–î–°–ß–ï–¢ –¢–ê–ë–õ–ò–¶ ==="
TABLE_COUNT=$(echo "$TABLES_RESULT" | grep -c "table")
log "–°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: $TABLE_COUNT"

if [ "$TABLE_COUNT" -ge 7 ]; then
    log "‚úÖ –û–¢–õ–ò–ß–ù–û! –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ ($TABLE_COUNT —Ç–∞–±–ª–∏—Ü)"
elif [ "$TABLE_COUNT" -ge 4 ]; then
    log "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ ($TABLE_COUNT —Ç–∞–±–ª–∏—Ü)"
else
    log "‚ùå –ú–∞–ª–æ —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ ($TABLE_COUNT)"
fi

echo ""
echo "=== –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –¢–ê–ë–õ–ò–¶ ==="
EXPECTED_TABLES=("users" "campaigns" "contacts" "call_results" "blacklist" "webhook_endpoints" "token_blacklist")
for table in "${EXPECTED_TABLES[@]}"; do
    if echo "$TABLES_RESULT" | grep -q "$table"; then
        echo "‚úÖ $table - –Ω–∞–π–¥–µ–Ω–∞"
    else
        echo "‚ùå $table - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

log "üöÄ –®–ê–ì 5: –ü–ï–†–ï–ó–ê–ü–£–°–ö BACKEND –° –ü–û–õ–ù–û–ô –°–•–ï–ú–û–ô..."

log "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend..."
docker compose -f docker-compose-ready.yml stop backend
docker compose -f docker-compose-ready.yml rm -f backend
docker rm -f dialer_backend_ready 2>/dev/null || true

log "  –ó–∞–ø—É—Å–∫ backend —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π –ë–î..."
docker compose -f docker-compose-ready.yml up -d backend

log "‚è∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì BACKEND –° –ü–û–õ–ù–û–ô –°–•–ï–ú–û–ô (45 —Å–µ–∫—É–Ω–¥)..."

sleep 10

for i in {1..6}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    log "üìä Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS (${i}/6)"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        
        sleep 3
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Closing database pool"; then
            log "‚ùå –í–°–Å –ï–©–Å –û–®–ò–ë–ö–ê: Closing database pool"
            echo "=== –õ–û–ì–ò –ü–†–û–ë–õ–ï–ú–´ ==="
            echo "$LOGS" | head -8
            
        elif echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è: $MODULE_ERROR"
            
        elif echo "$LOGS" | grep -q "Config validation error"; then
            CONFIG_ERROR=$(echo "$LOGS" | grep "Config validation error" | head -1)
            log "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_ERROR"
            
        elif echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server|App listening)"; then
            log "üéâ BACKEND –°–ï–†–í–ï–† –ó–ê–ü–£–°–¢–ò–õ–°–Ø!"
            
            sleep 2
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê! –û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –ú–ò–ì–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:"
                echo "  üõ£Ô∏è  –í–°–ï require() –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
                echo "  üì¶ –í–°–ï –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"
                echo "  üîí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                echo "  üê≥ Docker –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"
                echo "  üóÑÔ∏è  –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î –∏–∑ 7 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"
                echo "  üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã: users, campaigns, contacts, call_results, blacklist, webhooks"
                echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo ""
                echo "üåê PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk AMI: localhost:5038"
                echo "  PostgreSQL:   localhost:5432"
                echo "  Redis:        localhost:6379"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê!"
                echo "üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–õ–Ø PRODUCTION!"
                
                echo ""
                echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –í–°–ï–ô –°–ò–°–¢–ï–ú–´:"
                docker compose -f docker-compose-ready.yml ps
                
                echo ""
                echo "üóÑÔ∏è –ü–û–õ–ù–ê–Ø –°–•–ï–ú–ê –ë–î:"
                docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ API –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç..."
                if [[ $i -eq 5 ]]; then
                    echo "=== –ü–†–û–í–ï–†–ö–ê API ==="
                    curl -v http://localhost:3001/health 2>&1 | head -5
                fi
            fi
        else
            log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏..."
            if [[ $i -eq 5 ]]; then
                echo "=== –ü–û–õ–ù–´–ï –õ–û–ì–ò BACKEND ==="
                echo "$LOGS"
            fi
        fi
    else
        log "üìä Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS"
        if [[ $i -eq 5 ]]; then
            echo "=== –õ–û–ì–ò –û–®–ò–ë–ö–ò ==="
            docker logs dialer_backend_ready --tail 15 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    fi
    
    if [[ $i -lt 6 ]]; then
        sleep 5
    fi
done

echo ""
echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –§–ò–ù–ê–õ–¨–ù–´–ï –õ–û–ì–ò BACKEND:"
docker logs dialer_backend_ready --tail 25 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "üóÑÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:"
docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt" 2>&1

echo ""
if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
    log "üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! API –î–û–°–¢–£–ü–ï–ù!"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend:  http://localhost:3001/health"
else
    log "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
fi 