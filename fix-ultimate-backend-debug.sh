#!/bin/bash

# –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò DEBUG BACKEND

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üö® –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BACKEND"

log "üîç –ê–ù–ê–õ–ò–ó –°–ò–¢–£–ê–¶–ò–ò:"
echo "  ‚úÖ 4/5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç (postgres, redis, asterisk, frontend)"
echo "  ‚ùå Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ docker ps"
echo "  ‚ùå –õ–æ–≥–∏ backend –ø—É—Å—Ç—ã–µ - –∫—Ä–∞—à–∏—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"
echo "  ‚ùå –û—Å—Ç–∞–ª—Å—è @/ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ services/freeswitch.js"

log "üõ†Ô∏è –®–ê–ì 1: –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï @/ –í–ö–õ–Æ–ß–ê–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò..."

# –ò–∑–≤–ª–µ–∫–∞–µ–º dist –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–∞
TEMP_CONTAINER="temp_ultimate_fix"
docker create --name $TEMP_CONTAINER dailer-backend-absolute-final:latest
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_ultimate
docker rm $TEMP_CONTAINER

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï @/ –∞–ª–∏–∞—Å—ã –≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
log "  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï @/ –∞–ª–∏–∞—Å—ã –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö..."

find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/config|../config|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/utils|../utils|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/services|../services|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/models|../models|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/controllers|../controllers|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/middleware|../middleware|g' {} \;
find temp_dist_ultimate -name "*.js" -type f -exec sed -i 's|@/types|../types|g' {} \;

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (app.js)
sed -i 's|../config|./config|g' temp_dist_ultimate/app.js 2>/dev/null || true
sed -i 's|../utils|./utils|g' temp_dist_ultimate/app.js 2>/dev/null || true
sed -i 's|../services|./services|g' temp_dist_ultimate/app.js 2>/dev/null || true

log "‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–õ–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:"
echo "=== –ü–û–ò–°–ö –í–°–ï–• @/ –í .js –§–ê–ô–õ–ê–• ==="
find temp_dist_ultimate -name "*.js" -exec grep -l "@/" {} \; || echo "‚úÖ –í–°–ï @/ –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"

log "üöÄ –®–ê–ì 2: –°–û–ó–î–ê–ï–ú –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –û–ë–†–ê–ó..."

cat > Dockerfile.ultimate << 'EOF'
FROM dailer-backend-absolute-final:latest

# –ö–æ–ø–∏—Ä—É–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é dist –ø–∞–ø–∫—É
COPY temp_dist_ultimate /app/dist

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /app

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
CMD ["node", "dist/app.js"]
EOF

# –°–æ–±–∏—Ä–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑
docker build -f Dockerfile.ultimate -t dailer-backend-ultimate:latest .

# –û—á–∏—Å—Ç–∫–∞
rm -rf temp_dist_ultimate Dockerfile.ultimate

log "üîç –®–ê–ì 3: DEBUG –†–ï–ñ–ò–ú - –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö BACKEND..."

echo "=== –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ó–ê ==="
log "  –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª—ã –µ—Å—Ç—å –≤ –æ–±—Ä–∞–∑–µ..."
docker run --rm dailer-backend-ultimate:latest ls -la dist/ | head -5

echo ""
echo "=== –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê app.js ==="
log "  –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ app.js –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç @/"
docker run --rm dailer-backend-ultimate:latest grep -n "@/" dist/app.js || echo "‚úÖ app.js —á–∏—Å—Ç"

echo ""
echo "=== –¢–ï–°–¢ 3: –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò ==="
log "  –ó–∞–ø—É—Å–∫ backend –≤ debug —Ä–µ–∂–∏–º–µ —Å –Ω–∞—à–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏..."

docker run --rm -it \
    --network dialer-ready_dialer_network \
    -e NODE_ENV=production \
    -e DB_HOST=postgres \
    -e DB_PORT=5432 \
    -e DB_NAME=dialer \
    -e DB_USER=dialer \
    -e DB_PASSWORD=dialer_pass_2025 \
    -e DATABASE_URL=postgresql://dialer:dialer_pass_2025@postgres:5432/dialer \
    -e REDIS_HOST=redis \
    -e REDIS_PORT=6379 \
    -e REDIS_URL=redis://redis:6379 \
    -e VOIP_PROVIDER=asterisk \
    -e ASTERISK_HOST=asterisk \
    -e ASTERISK_PORT=5038 \
    -e ASTERISK_USERNAME=admin \
    -e ASTERISK_PASSWORD=dailer_admin_2025 \
    -e ASTERISK_URL=ami://admin:dailer_admin_2025@asterisk:5038 \
    -e JWT_SECRET=2ffe1d3e9df1ffe8e07a5c2940b8d2c56e8280b9bf42965027b5605e5cfe11c2 \
    -e JWT_EXPIRES_IN=24h \
    -e LOG_LEVEL=info \
    dailer-backend-ultimate:latest \
    node dist/app.js

echo ""
log "üîÑ –®–ê–ì 4: –ï–°–õ–ò –†–£–ß–ù–û–ô –ó–ê–ü–£–°–ö –°–†–ê–ë–û–¢–ê–õ - –û–ë–ù–û–í–õ–Ø–ï–ú COMPOSE..."

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –Ω–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑
sed -i 's|dailer-backend-absolute-final:latest|dailer-backend-ultimate:latest|g' docker-compose-ready.yml

log "üöÄ –ü–ï–†–ï–ó–ê–ü–£–°–ö –° –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ú –û–ë–†–ê–ó–û–ú..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ backend –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
docker compose -f docker-compose-ready.yml stop backend 2>/dev/null || true
docker compose -f docker-compose-ready.yml rm -f backend 2>/dev/null || true

# –ó–∞–ø—É—Å–∫–∞–µ–º backend —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º
docker compose -f docker-compose-ready.yml up -d backend

log "‚è∞ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (45 —Å–µ–∫—É–Ω–¥)..."

sleep 10

for i in {1..7}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    RUNNING_COUNT=$(docker compose -f docker-compose-ready.yml ps --format="{{.Status}}" | grep -c "Up" || echo "0")
    
    log "üìä –°—Ç–∞—Ç—É—Å: $RUNNING_COUNT/5 —Å–µ—Ä–≤–∏—Å–æ–≤, Backend: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ó–ê–ü–£–©–ï–ù!"
        
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π: $MODULE_ERROR"
            break
            
        elif echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: $ERROR_MSG"
            break
            
        elif [[ -n "$LOGS" ]] && echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server)"; then
            log "‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            
            # API —Ç–µ—Å—Ç
            sleep 5
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –ü–û–õ–ù–ê–Ø –ò –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê:"
                echo "  üéØ TypeScript path alias –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –í–°–ï–• —Ñ–∞–π–ª–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"
                echo "  üîß Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                echo "  üîê –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo ""
                echo "üåê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê:"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                echo "  PostgreSQL:   docker exec -it dialer_postgres_ready psql -U dialer -d dialer"
                echo "  Redis CLI:    docker exec -it dialer_redis_ready redis-cli"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%!"
                echo ""
                echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
                echo ""
                echo "üìä –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
                docker compose -f docker-compose-ready.yml ps
                
                echo ""
                echo "üéä üéä üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –£–°–ü–ï–®–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ï–ô! üéä üéä üéä"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (${i}*5 —Å–µ–∫)"
            fi
        else
            log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ—Ç –ª–æ–≥–æ–≤ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (${i}*5 —Å–µ–∫)"
            if [[ $i -eq 4 ]]; then
                echo "=== –¢–ï–ö–£–©–ò–ï –õ–û–ì–ò BACKEND ==="
                echo "$LOGS"
            fi
        fi
    else
        log "üìä Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
        if [[ $i -eq 4 ]]; then
            echo "=== –ü–û–ü–´–¢–ö–ê –ü–û–õ–£–ß–ò–¢–¨ –õ–û–ì–ò ==="
            docker logs dialer_backend_ready --tail 20 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ backend:"
docker logs dialer_backend_ready --tail 30 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞:"
docker run --rm dailer-backend-ultimate:latest find dist -name "*.js" -exec grep -l "@/" {} \; | head -3 || echo "‚úÖ –ù–µ—Ç @/ –≤ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–º –æ–±—Ä–∞–∑–µ"

exit 1 