#!/bin/bash

# –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø –ü–†–û–ë–õ–ï–ú"

log "‚úÖ –ü–†–û–ì–†–ï–°–°:"
echo "  üéØ utils/logger.js –ò–°–ü–†–ê–í–õ–ï–ù!"
echo "  üîß –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
echo "  üöÄ Docker –æ–±—Ä–∞–∑ dailer-backend-final —Å–æ–∑–¥–∞–Ω"
echo ""
echo "‚ùå –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´:"
echo "  1. services/freeswitch.js —Å–æ–¥–µ—Ä–∂–∏—Ç @/ –∞–ª–∏–∞—Å"
echo "  2. Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"

log "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø..."

echo "=== –°–¢–ê–¢–£–° –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
docker compose -f docker-compose-ready.yml ps

echo ""
echo "=== –ü–û–ü–´–¢–ö–ê –ü–û–õ–£–ß–ò–¢–¨ –õ–û–ì–ò BACKEND ==="
docker logs dialer_backend_ready --tail 50 2>&1 || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

log "üõ†Ô∏è –ò–°–ü–†–ê–í–õ–Ø–ï–ú –û–°–¢–ê–í–®–ò–ô–°–Ø services/freeswitch.js..."

# –ò–∑–≤–ª–µ–∫–∞–µ–º dist –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–∑–∞
TEMP_CONTAINER="temp_final_fix"
docker create --name $TEMP_CONTAINER dailer-backend-final:latest
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_final
docker rm $TEMP_CONTAINER

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º services/freeswitch.js
if [ -f temp_dist_final/services/freeswitch.js ]; then
    log "  –ü—Ä–æ–≤–µ—Ä—è–µ–º services/freeswitch.js..."
    echo "=== @/ –ê–õ–ò–ê–°–´ –í FREESWITCH.JS ==="
    grep -n "@/" temp_dist_final/services/freeswitch.js || echo "–ù–µ—Ç @/ –∞–ª–∏–∞—Å–æ–≤"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ @/ –∞–ª–∏–∞—Å—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
    sed -i 's|require("@/config")|require("../config")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/utils")|require("../utils")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/services")|require("../services")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/models")|require("../models")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/controllers")|require("../controllers")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/middleware")|require("../middleware")|g' temp_dist_final/services/freeswitch.js
    sed -i 's|require("@/types")|require("../types")|g' temp_dist_final/services/freeswitch.js
    
    echo "=== –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø FREESWITCH.JS ==="
    grep -n "@/" temp_dist_final/services/freeswitch.js || echo "‚úÖ –í—Å–µ @/ –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"
else
    log "‚ùå services/freeswitch.js –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

log "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–ê–ô–õ–û–í..."
echo "=== –ü–û–ò–°–ö –í–°–ï–• –û–°–¢–ê–í–®–ò–•–°–Ø @/ –ê–õ–ò–ê–°–û–í –í .js –§–ê–ô–õ–ê–• ==="
find temp_dist_final -name "*.js" -type f -exec grep -l "@/" {} \; || echo "‚úÖ –í–°–ï @/ –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö .js —Ñ–∞–π–ª–∞—Ö!"

log "üöÄ –°–û–ó–î–ê–ï–ú –ê–ë–°–û–õ–Æ–¢–ù–û –§–ò–ù–ê–õ–¨–ù–´–ô –û–ë–†–ê–ó..."

cat > Dockerfile.absolute_final << 'EOF'
FROM dailer-backend-final:latest

# –ö–æ–ø–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é dist –ø–∞–ø–∫—É
COPY temp_dist_final /app/dist

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
CMD ["node", "dist/app.js"]
EOF

# –°–æ–±–∏—Ä–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
docker build -f Dockerfile.absolute_final -t dailer-backend-absolute-final:latest .

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose
sed -i 's|dailer-backend-final:latest|dailer-backend-absolute-final:latest|g' docker-compose-ready.yml

# –û—á–∏—Å—Ç–∫–∞
rm -rf temp_dist_final Dockerfile.absolute_final

log "üöÄ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö..."

# –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
docker compose -f docker-compose-ready.yml down

# –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∏—Å—è—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker ps -a --filter "name=dialer_backend_ready" -q | xargs -r docker rm -f

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–Ω–æ–≤–æ
docker compose -f docker-compose-ready.yml up -d

log "‚è∞ –ê–ë–°–û–õ–Æ–¢–ù–û –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (60 —Å–µ–∫—É–Ω–¥)..."

sleep 15

for i in {1..9}; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    RUNNING_COUNT=$(docker compose -f docker-compose-ready.yml ps --format="{{.Status}}" | grep -c "Up" || echo "0")
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    
    log "üìä –°–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: $RUNNING_COUNT/5, Backend: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    
    if [[ "$RUNNING_COUNT" -ge "4" ]] && echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
        
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 20 2>&1)
        
        if echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –í—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π: $MODULE_ERROR"
            
            echo "=== –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò ==="
            echo "$LOGS" | grep -A 3 -B 3 "Cannot find module"
            break
            
        elif echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: $ERROR_MSG"
            
            echo "=== –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò ==="
            echo "$LOGS" | grep -A 3 -B 3 "Error:"
            break
            
        elif echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port)"; then
            log "‚úÖ Backend —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç!"
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API
            sleep 5
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –ü–û–ë–ï–î–ê! –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–´:"
                echo "  üéØ TypeScript path alias –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –í–°–ï–• —Ñ–∞–π–ª–∞—Ö"
                echo "  üîß services/freeswitch.js –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
                echo "  üîê JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                echo "  üìù –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo ""
                echo "üåê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø VoIP –°–ò–°–¢–ï–ú–ê:"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                echo "  PostgreSQL:   docker exec -it dialer_postgres_ready psql -U dialer -d dialer"
                echo "  Redis CLI:    docker exec -it dialer_redis_ready redis-cli"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%!"
                echo ""
                echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
                echo ""
                echo "üìä –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
                docker compose -f docker-compose-ready.yml ps
                
                echo ""
                echo "üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SIP –ó–í–û–ù–ö–û–í:"
                echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000"
                echo "  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SIP trunk (IP: 62.141.121.197:5070)"
                echo "  3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                
                echo ""
                echo "üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (${i}*5 —Å–µ–∫)"
            fi
        else
            log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ listening (${i}*5 —Å–µ–∫)"
            if [[ $i -eq 5 ]]; then
                echo "=== –õ–û–ì–ò BACKEND –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ==="
                echo "$LOGS"
            fi
        fi
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –õ–æ–≥–∏ backend:"
docker logs dialer_backend_ready --tail 30

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞:"
docker run --rm dailer-backend-absolute-final:latest find dist -name "*.js" -exec grep -l "@/" {} \; | head -3 || echo "‚úÖ –ù–µ—Ç @/ –∞–ª–∏–∞—Å–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–∑–µ"

exit 1 