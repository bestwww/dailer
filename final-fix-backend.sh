#!/bin/bash

# –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú –° BACKEND

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BACKEND DOCKERFILE"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose-ready.yml down --remove-orphans --volumes 2>/dev/null || true
docker compose -f docker-compose-stable.yml down --remove-orphans --volumes 2>/dev/null || true
docker compose down --remove-orphans --volumes 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
log "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ backend –æ–±—Ä–∞–∑–æ–≤..."
docker images | grep -E "(dailer|dialer)" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

log "üìã –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:"
echo "  ‚ùå COPY backend/package.json - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ COPY package.json"
echo "  ‚ùå COPY backend/ . - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ COPY . ."
echo "  ‚ùå COPY database /database - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ RUN mkdir -p /database"
echo "  ‚ùå build context –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã - –≤—Å–µ COPY –∫–æ–º–∞–Ω–¥—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã"

log "‚úÖ –í–°–ï DOCKERFILE –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑ Asterisk
if ! docker images | grep -q "mlan/asterisk.*base"; then
    log "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ Asterisk..."
    docker pull mlan/asterisk:base
    
    if [ $? -ne 0 ]; then
        log "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ Asterisk"
        exit 1
    fi
fi

log "üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´..."

# –°–±–æ—Ä–∫–∞ –±–µ–∑ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
log "üèóÔ∏è –°–±–æ—Ä–∫–∞ backend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º Dockerfile..."
docker compose -f docker-compose-ready.yml build backend --no-cache --progress=plain

BUILD_RESULT=$?

if [ $BUILD_RESULT -ne 0 ]; then
    log "‚ùå –°–ë–û–†–ö–ê BACKEND –ù–ï –£–î–ê–õ–ê–°–¨"
    log "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤—ã—à–µ"
    exit 1
fi

log "‚úÖ Backend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"

# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
log "üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose-ready.yml up -d

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
log "‚è∞ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ (3 –º–∏–Ω—É—Ç—ã)..."

for i in $(seq 1 36); do
    sleep 5
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    POSTGRES_RUNNING=$(docker ps --filter "name=dialer_postgres_ready" --format "{{.Names}}" 2>/dev/null)
    REDIS_RUNNING=$(docker ps --filter "name=dialer_redis_ready" --format "{{.Names}}" 2>/dev/null)
    ASTERISK_RUNNING=$(docker ps --filter "name=dialer_asterisk_ready" --format "{{.Names}}" 2>/dev/null)
    BACKEND_RUNNING=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Names}}" 2>/dev/null)
    FRONTEND_RUNNING=$(docker ps --filter "name=dialer_frontend_ready" --format "{{.Names}}" 2>/dev/null)
    
    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    RUNNING_COUNT=0
    SERVICES_STATUS=""
    
    if [ -n "$POSTGRES_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS PG‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS PG‚ùå"
    fi
    
    if [ -n "$REDIS_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Redis‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Redis‚ùå"
    fi
    
    if [ -n "$ASTERISK_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Asterisk‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Asterisk‚ùå"
    fi
    
    if [ -n "$BACKEND_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Backend‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Backend‚ùå"
    fi
    
    if [ -n "$FRONTEND_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Frontend‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Frontend‚ùå"
    fi
    
    log "üìä –ó–∞–ø—É—â–µ–Ω–æ: $RUNNING_COUNT/5 |$SERVICES_STATUS (${i}5 —Å–µ–∫)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
    if [ $RUNNING_COUNT -eq 5 ]; then
        log "üéâ –í–°–ï 5 –°–ï–†–í–ò–°–û–í –ó–ê–ü–£–©–ï–ù–´!"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        sleep 15
        
        log "üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´..."
        
        # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        POSTGRES_HEALTHY=$(docker compose -f docker-compose-ready.yml ps postgres --format "{{.Health}}" 2>/dev/null)
        REDIS_HEALTHY=$(docker compose -f docker-compose-ready.yml ps redis --format "{{.Health}}" 2>/dev/null)
        
        if [[ "$POSTGRES_HEALTHY" == *"healthy"* ]]; then
            log "‚úÖ PostgreSQL –∑–¥–æ—Ä–æ–≤"
        else
            log "‚ö†Ô∏è PostgreSQL: $POSTGRES_HEALTHY"
        fi
        
        if [[ "$REDIS_HEALTHY" == *"healthy"* ]]; then
            log "‚úÖ Redis –∑–¥–æ—Ä–æ–≤"
        else
            log "‚ö†Ô∏è Redis: $REDIS_HEALTHY"
        fi
        
        # –¢–µ—Å—Ç Backend API
        sleep 5
        if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
            log "‚úÖ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ /health"
        else
            log "‚ö†Ô∏è Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è)"
        fi
        
        # –¢–µ—Å—Ç Asterisk CLI
        if timeout 15 docker exec dialer_asterisk_ready asterisk -r -x "core show version" >/dev/null 2>&1; then
            log "‚úÖ Asterisk CLI —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log "‚ö†Ô∏è Asterisk CLI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"
        fi
        
        # –¢–µ—Å—Ç Frontend
        if curl -sf http://localhost:3000 >/dev/null 2>&1; then
            log "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            log "‚ö†Ô∏è Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
        log "üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:"
        docker compose -f docker-compose-ready.yml ps
        
        log "üéØ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!"
        echo ""
        echo "üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!"
        echo "üåê Frontend:     http://localhost:3000"
        echo "üîß Backend API:  http://localhost:3001/health"
        echo "üìû Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
        echo "üíæ Postgres:     psql -h localhost -U dialer -d dialer"
        echo "üî¥ Redis:        redis-cli -h localhost"
        echo ""
        log "‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
        
        exit 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    FAILED_CONTAINERS=$(docker compose -f docker-compose-ready.yml ps --format "{{.Service}} {{.Status}}" | grep -E "(Exit|Exited)" || echo "")
    if [ -n "$FAILED_CONTAINERS" ]; then
        log "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–∞–≤—à–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "$FAILED_CONTAINERS"
        break
    fi
done

# –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
log "‚ùå –ù–ï –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–°–¢–ò–õ–ò–°–¨ –ó–ê 3 –ú–ò–ù–£–¢–´"
log "üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"

echo ""
echo "1. üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "2. üìù –õ–æ–≥–∏ backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫):"
docker logs dialer_backend_ready --tail 20 2>/dev/null || echo "Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "3. üìù –õ–æ–≥–∏ frontend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
docker logs dialer_frontend_ready --tail 10 2>/dev/null || echo "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
echo "4. üìù –õ–æ–≥–∏ Asterisk (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫):"
docker logs dialer_asterisk_ready --tail 10 2>/dev/null || echo "Asterisk –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

echo ""
log "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫"
echo "  2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "     docker compose -f docker-compose-ready.yml restart backend"
echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞: df -h && free -h"
echo "  4. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:"
echo "     docker system prune -f && ./final-fix-backend.sh"

exit 1 