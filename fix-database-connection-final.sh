#!/bin/bash

# лўлАлЪлалљлњлЏлЋлЮлўлЋ лЪлалълЉлЏлЋлю лА лЉлљлЌлълЎ лћлљлЮлЮлФлЦ

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "­ЪЌё№ИЈ лўлАлЪлалљлњлЏлЋлЮлўлЋ лЉлљлЌлФ лћлљлЮлЮлФлЦ!"

log "РюЁ лълблЏлўлДлЮлљл» лћлўлљлЊлЮлълАлблўлџлљ лЌлљлњлЋлалелЋлЮлљ:"
echo "  РюЁ лњЛЂлх ЛЂлхЛђл▓лИЛЂЛІ лил░л┐ЛЃЛЅлхлйЛІ: PostgreSQL, Redis, Asterisk РюЊ"
echo "  РюЁ Node.js л┐ЛђлЙЛєлхЛЂЛЂ ЛЂЛѓл░ЛђЛѓЛЃлхЛѓ: node dist/app.js РюЊ"
echo "  РюЁ лЪлхЛђлхл╝лхлйлйЛІлх лЙл║ЛђЛЃлХлхлйлИЛЈ л┐Лђл░л▓лИл╗ЛїлйЛІлх РюЊ"
echo "  РЮї лЪлалълЉлЏлЋлюлљ: Backend unhealthy, л╗лЙл│лИ 'Closing database pool...'"
echo "  ­Ъј» лћлўлљлЊлЮлълЌ: лЪЛђлИл╗лЙлХлхлйлИлх ЛЂЛѓл░ЛђЛѓЛЃлхЛѓ лйлЙ ЛЂЛђл░лиЛЃ лил░л║ЛђЛІл▓л░лхЛѓЛЂЛЈ лИли-лил░ лЉлћ"

log "­ЪћД лелљлЊ 1: лЪлалълњлЋлалџлљ лћлълАлблБлЪлЮлълАлблў POSTGRESQL..."

echo "=== лАлблљлблБлА POSTGRESQL лџлълЮлблЋлЎлЮлЋлалљ ==="
docker ps --filter "name=dialer_postgres_ready" --format "table {{.Names}}\t{{.Status}}"

echo ""
echo "=== лЪлалълњлЋлалџлљ POSTGRESQL лўлЌлЮлБлблалў BACKEND ==="
PG_TEST=$(docker exec dialer_backend_ready timeout 5 pg_isready -h postgres -U dialer -d dialer 2>&1 || echo "pg_isready лйлхл┤лЙЛЂЛѓЛЃл┐лхлй")
echo "pg_isready ЛђлхлиЛЃл╗ЛїЛѓл░Лѓ: $PG_TEST"

echo ""
echo "=== лЪлалълњлЋлалџлљ лАлЋлблЋлњлълЎ лАлњл»лЌлў лА POSTGRES ==="
PING_TEST=$(docker exec dialer_backend_ready ping -c 2 postgres 2>&1 | head -3 || echo "ping лйлхл┤лЙЛЂЛѓЛЃл┐лхлй")
echo "Ping postgres ЛђлхлиЛЃл╗ЛїЛѓл░Лѓ:"
echo "$PING_TEST"

echo ""
echo "=== лЪлалълњлЋлалџлљ лблЋлЏлЮлЋлб лАлълЋлћлўлЮлЋлЮлўл» ==="
TELNET_TEST=$(docker exec dialer_backend_ready timeout 3 nc -z postgres 5432 2>&1 && echo "PORT 5432 OPEN" || echo "PORT 5432 CLOSED")
echo "лЪлЙЛђЛѓ 5432 ЛђлхлиЛЃл╗ЛїЛѓл░Лѓ: $TELNET_TEST"

log "­ЪћД лелљлЊ 2: лЪлалълњлЋлалџлљ DATABASE_URL лў лЪлълћлџлЏл«лДлЋлЮлўл»..."

echo "=== лблЋлџлБлЕлўлЎ DATABASE_URL ==="
DATABASE_URL=$(docker exec dialer_backend_ready env | grep "DATABASE_URL" || echo "DATABASE_URL лйлх лйл░л╣л┤лхлй")
echo "$DATABASE_URL"

echo ""
echo "=== лЪлълЪлФлблџлљ лЪлълћлџлЏл«лДлЋлЮлўл» лџ лЉлљлЌлЋ лћлљлЮлЮлФлЦ ==="
if command -v psql >/dev/null 2>&1; then
    PSQL_TEST=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -c "SELECT version();" 2>&1 | head -3)
    echo "PostgreSQL л▓лхЛђЛЂлИЛЈ:"
    echo "$PSQL_TEST"
else
    log "  psql лйлхл┤лЙЛЂЛѓЛЃл┐лхлй, л┐ЛђлЙл▒ЛЃлхл╝ ЛЄлхЛђлхли backend..."
    
    # лЪЛІЛѓл░лхл╝ЛЂЛЈ л┐лЙл┤л║л╗ЛјЛЄлИЛѓЛїЛЂЛЈ ЛЄлхЛђлхли node
    NODE_DB_TEST=$(docker exec dialer_backend_ready timeout 10 node -e "
    const { Pool } = require('pg'); 
    const pool = new Pool({connectionString: process.env.DATABASE_URL}); 
    pool.query('SELECT version()', (err, res) => {
        if (err) console.log('DB ERROR:', err.message);
        else console.log('DB OK:', res.rows[0].version.substring(0,50));
        process.exit(0);
    });
    " 2>&1)
    echo "Node.js DB ЛѓлхЛЂЛѓ:"
    echo "$NODE_DB_TEST"
fi

log "­ЪћД лелљлЊ 3: лЪлалълњлЋлалџлљ лАлблалБлџлблБлалФ лЉлљлЌлФ лћлљлЮлЮлФлЦ..."

echo "=== лЪлалълњлЋлалџлљ лАлБлЕлЋлАлблњлБл«лЕлўлЦ лблљлЉлЏлўлд ==="
TABLES_TEST=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt" 2>&1)
echo "лбл░л▒л╗лИЛєЛІ л▓ л▒л░лилх л┤л░лйлйЛІЛЁ:"
echo "$TABLES_TEST"

if echo "$TABLES_TEST" | grep -q "No relations found"; then
    log "РЮї лЉлљлЌлљ лћлљлЮлЮлФлЦ лЪлБлАлблљл»! лЮЛЃлХлйЛІ л╝лИл│Лђл░ЛєлИлИ!"
    
    log "­ЪћД лелљлЊ 4: лЌлљлЪлБлАлџ люлўлЊлалљлдлўлЎ лЉлљлЌлФ лћлљлЮлЮлФлЦ..."
    
    echo "=== лЪлалълњлЋлалџлљ люлўлЊлалљлдлўлълЮлЮлФлЦ лцлљлЎлЏлълњ ==="
    MIGRATION_FILES=$(docker exec dialer_backend_ready find /app -name "*.sql" -o -name "*migration*" -o -name "*migrate*" | head -10)
    echo "лцл░л╣л╗ЛІ л╝лИл│Лђл░ЛєлИл╣:"
    echo "$MIGRATION_FILES"
    
    echo ""
    echo "=== лЪлалълњлЋлалџлљ BACKEND лАлџлалўлЪлблълњ ==="
    BACKEND_SCRIPTS=$(docker exec dialer_backend_ready ls -la /app/dist/scripts/ 2>/dev/null || echo "лЪл░л┐л║л░ scripts лйлх лйл░л╣л┤лхлйл░")
    echo "лАл║ЛђлИл┐ЛѓЛІ backend:"
    echo "$BACKEND_SCRIPTS"
    
    if echo "$BACKEND_SCRIPTS" | grep -q "migrate"; then
        log "  лЮл░л╣л┤лхлй ЛЂл║ЛђлИл┐Лѓ л╝лИл│Лђл░ЛєлИл╣, лил░л┐ЛЃЛЂл║л░лхл╝..."
        
        echo "=== лЌлљлЪлБлАлџ люлўлЊлалљлдлўлЎ ==="
        MIGRATE_RESULT=$(docker exec dialer_backend_ready timeout 30 node /app/dist/scripts/migrate.js 2>&1 || echo "люлИл│Лђл░ЛєлИлИ лйлх ЛЃл┤л░л╗лИЛЂЛї")
        echo "лалхлиЛЃл╗ЛїЛѓл░Лѓ л╝лИл│Лђл░ЛєлИл╣:"
        echo "$MIGRATE_RESULT"
        
        sleep 3
        
        echo "=== лЪлалълњлЋлалџлљ лблљлЉлЏлўлд лЪлълАлЏлЋ люлўлЊлалљлдлўлЎ ==="
        TABLES_AFTER=$(docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt" 2>&1)
        echo "лбл░л▒л╗лИЛєЛІ л┐лЙЛЂл╗лх л╝лИл│Лђл░ЛєлИл╣:"
        echo "$TABLES_AFTER"
        
    else
        log "  лАл║ЛђлИл┐Лѓ л╝лИл│Лђл░ЛєлИл╣ лйлх лйл░л╣л┤лхлй, ЛЂлЙлил┤л░лхл╝ л▒л░лилЙл▓ЛІлх Лѓл░л▒л╗лИЛєЛІ..."
        
        echo "=== лАлълЌлћлљлЮлўлЋ лЉлљлЌлълњлФлЦ лблљлЉлЏлўлд ==="
        docker exec dialer_postgres_ready psql -U dialer -d dialer -c "
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS campaigns (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS contacts (
            id SERIAL PRIMARY KEY,
            phone VARCHAR(20) NOT NULL,
            campaign_id INTEGER REFERENCES campaigns(id),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE TABLE IF NOT EXISTS call_results (
            id SERIAL PRIMARY KEY,
            contact_id INTEGER REFERENCES contacts(id),
            status VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        " 2>&1
        
        echo "лЉл░лилЙл▓ЛІлх Лѓл░л▒л╗лИЛєЛІ ЛЂлЙлил┤л░лйЛІ"
    fi
else
    log "РюЁ лбл░л▒л╗лИЛєЛІ ЛЃлХлх ЛЂЛЃЛЅлхЛЂЛѓл▓ЛЃЛјЛѓ л▓ л▒л░лилх л┤л░лйлйЛІЛЁ"
fi

log "­Ъџђ лелљлЊ 5: лЪлЋлалЋлЌлљлЪлБлАлџ BACKEND лА лўлАлЪлалљлњлЏлЋлЮлЮлълЎ лЉлћ..."

log "  лъЛЂЛѓл░лйлЙл▓л║л░ лИ л┐лЙл╗лйлЙлх ЛЃл┤л░л╗лхлйлИлх backend..."
docker compose -f docker-compose-ready.yml stop backend 2>/dev/null || true
docker compose -f docker-compose-ready.yml rm -f backend 2>/dev/null || true

# лБл┤л░л╗ЛЈлхл╝ л┐ЛђлЙл▒л╗лхл╝лйЛІл╣ л║лЙлйЛѓлхл╣лйлхЛђ л┐ЛђлИлйЛЃл┤лИЛѓлхл╗ЛїлйлЙ
docker rm -f dialer_backend_ready 2>/dev/null || true

# лъЛЄлИЛЅл░лхл╝ systemd units лхЛЂл╗лИ лйЛЃлХлйлЙ
log "  лъЛЄлИЛЂЛѓл║л░ systemd units..."
systemctl reset-failed 2>/dev/null || true

log "  лЌл░л┐ЛЃЛЂл║ backend ЛЂ лИЛЂл┐Лђл░л▓л╗лхлйлйлЙл╣ л▒л░лилЙл╣ л┤л░лйлйЛІЛЁ..."
docker compose -f docker-compose-ready.yml up -d backend

log "РЈ░ люлълЮлўлблълалўлЮлЊ BACKEND лА лўлАлЪлалљлњлЏлЋлЮлЮлълЎ лЉлћ (30 ЛЂлхл║ЛЃлйл┤)..."

sleep 10

for i in {1..4}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    log "­ЪЊі Backend ЛЂЛѓл░ЛѓЛЃЛЂ: $BACKEND_STATUS (${i}*5 ЛЂлхл║)"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "РюЁ Backend л║лЙлйЛѓлхл╣лйлхЛђ лил░л┐ЛЃЛЅлхлй!"
        
        sleep 3
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Closing database pool"; then
            log "РЮї лњлАлЂ лЋлЕлЂ лълелўлЉлџлљ: Closing database pool"
            echo "=== лЏлълЊлў лЉлћ лЪлалълЉлЏлЋлюлФ ==="
            echo "$LOGS" | head -8
            
        elif echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "РЮї лъЛѕлИл▒л║л░ л╝лЙл┤ЛЃл╗ЛЈ: $MODULE_ERROR"
            
        elif echo "$LOGS" | grep -q "Config validation error"; then
            CONFIG_ERROR=$(echo "$LOGS" | grep "Config validation error" | head -1)
            log "Рџа№ИЈ лъЛѕлИл▒л║л░ л║лЙлйЛёлИл│ЛЃЛђл░ЛєлИлИ: $CONFIG_ERROR"
            
        elif echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server)"; then
            log "­ЪјЅ BACKEND лАлЋлалњлЋла лЌлљлЪлБлАлблўлЏлАл»!"
            
            sleep 2
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "­ЪјЅ BACKEND API лалљлЉлълблљлЋлб!"
                
                echo ""
                echo "­ЪјЅ ­ЪјЅ ­ЪјЅ лЪлълЏлЮлљл» лЪлълЉлЋлћлљ! лЉлљлЌлљ лћлљлЮлЮлФлЦ лўлАлЪлалљлњлЏлЋлЮлљ! ­ЪјЅ ­ЪјЅ ­ЪјЅ"
                echo ""
                echo "РюЁ лњлАлЋ лЪлалълЉлЏлЋлюлФ лалЋлелЋлЮлФ:"
                echo "  ­ЪЏБ№ИЈ  лњлАлЋ require() л┐ЛЃЛѓлИ лИЛЂл┐Лђл░л▓л╗лхлйЛІ"
                echo "  ­ЪЊд лњлАлЋ л╝лЙл┤ЛЃл╗лИ лил░л│ЛђЛЃлХл░ЛјЛѓЛЂЛЈ"
                echo "  ­Ъћњ лЪлхЛђлхл╝лхлйлйЛІлх лЙл║ЛђЛЃлХлхлйлИЛЈ л┐Лђл░л▓лИл╗ЛїлйЛІлх"
                echo "  ­Ъљ│ Docker л║лЙлйЛёл╗лИл║ЛѓЛІ ЛЃЛЂЛѓЛђл░лйлхлйЛІ"
                echo "  ­ЪЌё№ИЈ  лЉл░лил░ л┤л░лйлйЛІЛЁ л┐лЙл┤л║л╗ЛјЛЄлхлйл░ лИ Лђл░л▒лЙЛѓл░лхЛѓ"
                echo "  ­Ъџђ Backend API лЙЛѓл▓лхЛЄл░лхЛѓ"
                echo "  ­Ъїљ лњЛЂлх 5 ЛЂлхЛђл▓лИЛЂлЙл▓ Лђл░л▒лЙЛѓл░ЛјЛѓ"
                echo ""
                echo "­Ъїљ PRODUCTION VoIP лАлўлАлблЋлюлљ лЊлълблълњлљ!"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk AMI: localhost:5038"
                echo "  PostgreSQL:   localhost:5432"
                echo "  Redis:        localhost:6379"
                echo ""
                echo "­ЪЈЂ люлўлЊлалљлдлўл» FreeSWITCH Ръю ASTERISK лЌлљлњлЋлалелЋлЮлљ!"
                echo "­Ъџђ лАлўлАлблЋлюлљ лЊлълблълњлљ лћлЏл» PRODUCTION!"
                
                exit 0
            else
                log "Рџа№ИЈ Backend Лђл░л▒лЙЛѓл░лхЛѓ, лйлЙ API лйлх лЙЛѓл▓лхЛЄл░лхЛѓ..."
            fi
        else
            log "Рџа№ИЈ Backend Лђл░л▒лЙЛѓл░лхЛѓ, л░лйл░л╗лИлилИЛђЛЃлхл╝ л╗лЙл│лИ лил░л┐ЛЃЛЂл║л░..."
            if [[ $i -eq 3 ]]; then
                echo "=== лЪлълЏлЮлФлЋ лЏлълЊлў лЪлълАлЏлЋ лўлАлЪлалљлњлЏлЋлЮлўл» лЉлћ ==="
                echo "$LOGS"
            fi
        fi
    else
        log "­ЪЊі Backend лйлх лил░л┐ЛЃЛЅлхлй: $BACKEND_STATUS"
        if [[ $i -eq 3 ]]; then
            echo "=== лЏлълЊлў лълелўлЉлџлў BACKEND ==="
            docker logs dialer_backend_ready --tail 15 2>&1 || echo "лЏлЙл│лИ лйлхл┤лЙЛЂЛѓЛЃл┐лйЛІ"
        fi
    fi
    
    if [[ $i -lt 4 ]]; then
        sleep 5
    fi
done

echo ""
echo "­ЪЊі лцлўлЮлљлЏлглЮлФлЎ лАлблљлблБлА лњлАлЋлЦ лАлЋлалњлўлАлълњ:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "­ЪЊЮ лцлўлЮлљлЏлглЮлФлЋ лЏлълЊлў BACKEND:"
docker logs dialer_backend_ready --tail 20 2>&1 || echo "лЏлЙл│лИ лйлхл┤лЙЛЂЛѓЛЃл┐лйЛІ"

echo ""
if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
    log "­ЪјЅ лАлўлАлблЋлюлљ лалљлЉлълблљлЋлб! API лћлълАлблБлЪлЋлЮ!"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend:  http://localhost:3001/health"
else
    log "Рџа№ИЈ лбЛђлхл▒ЛЃлхЛѓЛЂЛЈ л┤лЙл┐лЙл╗лйлИЛѓлхл╗Лїлйл░ЛЈ л┤лИл░л│лйлЙЛЂЛѓлИл║л░ л▒л░лиЛІ л┤л░лйлйЛІЛЁ"
    echo ""
    echo "­ЪЊі лАлЙЛЂЛѓлЙЛЈлйлИлх л▒л░лиЛІ л┤л░лйлйЛІЛЁ:"
    docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt" 2>&1 | head -10
fi 