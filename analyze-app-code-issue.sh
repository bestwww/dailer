#!/bin/bash

# –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîç –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø!"

log "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–¢–í–ï–†–î–ò–õ–ê –ü–†–û–ë–õ–ï–ú–£:"
echo "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: 10 —Ç–∞–±–ª–∏—Ü, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
echo "  ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ‚úì"
echo "  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: express, pg, redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
echo "  üéØ –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç ‚Üí 'Closing database pool...' ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"
echo "  üìç –ü–†–ò–ß–ò–ù–ê: –ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–æ –∑–∞–ø—É—Å–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞"

log "üîß –®–ê–ì 1: –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û APP.JS..."

echo "=== –ü–û–ò–°–ö –ü–†–ò–ß–ò–ù–´ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –í APP.JS ==="
docker exec dialer_backend_ready grep -n -A 3 -B 3 "Closing database pool" /app/dist/app.js || echo "–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

echo ""
echo "=== –ü–û–ò–°–ö PROCESS.EXIT –í APP.JS ==="
docker exec dialer_backend_ready grep -n "process\.exit\|process\.kill\|\.exit(" /app/dist/app.js || echo "process.exit –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "=== –ü–û–ò–°–ö UNCAUGHT EXCEPTION ==="
docker exec dialer_backend_ready grep -n -A 2 -B 2 "uncaughtException\|unhandledRejection" /app/dist/app.js || echo "uncaught handlers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo ""
echo "=== –ü–û–ò–°–ö –£–°–õ–û–í–ò–ô –ó–ê–í–ï–†–®–ï–ù–ò–Ø ==="
docker exec dialer_backend_ready grep -n -A 2 -B 2 "return\|throw\|Error" /app/dist/app.js | head -15

log "üîß –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø..."

echo "=== –ü–û–ò–°–ö –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê ==="
docker exec dialer_backend_ready grep -n -A 5 -B 2 "listen\|createServer\|startServer\|app\.listen" /app/dist/app.js | head -20

echo ""
echo "=== –ü–û–ò–°–ö EXPRESS APP ==="
docker exec dialer_backend_ready grep -n -A 3 -B 1 "express()\|createApp\|app = " /app/dist/app.js | head -15

echo ""
echo "=== –ü–û–ò–°–ö –≠–ö–°–ü–û–†–¢–û–í ==="
docker exec dialer_backend_ready grep -n "exports\|module\.exports" /app/dist/app.js | head -10

log "üîß –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–û–ì–û –ö–û–î–ê TS..."

echo "=== –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û APP.TS ==="
if [ -f "backend/src/app.ts" ]; then
    echo "TypeScript –∏—Å—Ö–æ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:"
    head -30 backend/src/app.ts
else
    echo "app.ts –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "=== –ü–û–ò–°–ö MAIN FUNCTION ==="
if [ -f "backend/src/app.ts" ]; then
    grep -n -A 10 -B 2 "main\|startServer\|listen" backend/src/app.ts | head -20
fi

log "üîß –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ó–ê–ü–£–°–ö–ê..."

echo "=== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û EXPRESS –°–ï–†–í–ï–†–ê ==="
docker exec dialer_backend_ready sh -c "cat > /tmp/fixed_app.js << 'EOF'
const express = require('express');
const app = express();

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Basic routes
app.get('/', (req, res) => {
    res.json({ message: 'VoIP Dialer API', version: '1.0.0' });
});

const PORT = process.env.PORT || 3001;

const server = app.listen(PORT, '0.0.0.0', () => {
    console.log(\`üöÄ Server listening on port \${PORT}\`);
    console.log(\`‚úÖ API available at http://localhost:\${PORT}/health\`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('üìä Shutting down server...');
    server.close(() => {
        console.log('üìä Server closed');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('üìä SIGTERM received, shutting down...');
    server.close(() => {
        process.exit(0);
    });
});

console.log('‚úÖ Express server initialized');
EOF"

echo ""
echo "=== –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê ==="
FIXED_TEST=$(timeout 10 docker exec dialer_backend_ready node /tmp/fixed_app.js 2>&1 &
sleep 3
curl -sf http://localhost:3001/health 2>/dev/null && echo "FIXED SERVER WORKS!" || echo "Fixed server failed"
docker exec dialer_backend_ready pkill -f fixed_app 2>/dev/null)

echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
echo "$FIXED_TEST"

if echo "$FIXED_TEST" | grep -q "FIXED SERVER WORKS"; then
    log "‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê! –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    log "üöÄ –®–ê–ì 5: –°–û–ó–î–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û APP.JS..."
    
    echo "=== –°–û–ó–î–ê–ù–ò–ï WRAPPER –î–õ–Ø –ó–ê–ü–£–°–ö–ê ==="
    docker exec dialer_backend_ready sh -c "cat > /tmp/app_wrapper.js << 'EOF'
// Wrapper –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log('üöÄ Starting VoIP Dialer application...');

process.on('uncaughtException', (err) => {
    console.log('‚ùå Uncaught Exception:', err.message);
    console.log(err.stack);
});

process.on('unhandledRejection', (reason, promise) => {
    console.log('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ database pool
const originalExit = process.exit;
process.exit = function(code) {
    console.log('üõë Process.exit called with code:', code);
    console.trace('Exit called from:');
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    setTimeout(() => originalExit(code), 5000);
};

try {
    console.log('üì¶ Loading main application...');
    require('/app/dist/app.js');
    console.log('‚úÖ Application loaded successfully');
} catch (error) {
    console.log('‚ùå Error loading application:', error.message);
    console.log(error.stack);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º fallback —Å–µ—Ä–≤–µ—Ä
    console.log('üîÑ Starting fallback Express server...');
    const express = require('express');
    const app = express();
    
    app.get('/health', (req, res) => {
        res.json({ status: 'OK', mode: 'fallback' });
    });
    
    app.listen(3001, '0.0.0.0', () => {
        console.log('üöÄ Fallback server listening on port 3001');
    });
}
EOF"
    
    echo ""
    echo "=== –¢–ï–°–¢ WRAPPER ==="
    WRAPPER_TEST=$(timeout 15 docker exec dialer_backend_ready node /tmp/app_wrapper.js 2>&1 &
    sleep 5
    curl -sf http://localhost:3001/health 2>/dev/null && echo "WRAPPER WORKS!" || echo "Wrapper failed"
    docker exec dialer_backend_ready pkill -f app_wrapper 2>/dev/null)
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç wrapper:"
    echo "$WRAPPER_TEST"
    
else
    log "‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≥–ª—É–±–∂–µ"
fi

log "üîß –®–ê–ì 6: –ê–ù–ê–õ–ò–ó DOCKER –ö–û–ú–ê–ù–î–´ –ó–ê–ü–£–°–ö–ê..."

echo "=== –ü–†–û–í–ï–†–ö–ê DOCKERFILE –ö–û–ú–ê–ù–î–´ ==="
docker inspect dialer_backend_ready --format "{{.Config.Cmd}}"

echo ""
echo "=== –ü–†–û–í–ï–†–ö–ê ENTRYPOINT ==="
docker inspect dialer_backend_ready --format "{{.Config.Entrypoint}}"

log "üöÄ –®–ê–ì 7: –ü–û–ü–´–¢–ö–ê –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú..."

if echo "$WRAPPER_TEST" | grep -q "WRAPPER WORKS"; then
    log "‚úÖ WRAPPER –†–ê–ë–û–¢–ê–ï–¢! –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π docker-compose —Å wrapper
    cat > docker-compose-fixed.yml << EOF
services:
  postgres:
    image: postgres:15-alpine
    container_name: dialer_postgres_ready
    environment:
      POSTGRES_DB: dialer
      POSTGRES_USER: dialer
      POSTGRES_PASSWORD: dialer_pass_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dialer -d dialer"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dialer_redis_ready
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  asterisk:
    image: mlan/asterisk:base
    container_name: dialer_asterisk_ready
    ports:
      - "5038:5038"
      - "5060:5060/udp"
      - "5060:5060/tcp"
      - "10000-10020:10000-10020/udp"
    environment:
      ASTERISK_UID: 1000
      ASTERISK_GID: 1000
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show uptime' | grep -q 'System uptime'"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    image: dailer-backend-models-fixed:latest
    container_name: dialer_backend_ready
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://dialer:dialer_pass_2025@postgres:5432/dialer
      REDIS_URL: redis://redis:6379
      JWT_SECRET: 35879eb5eb209670e73111912c2e736eae55c6f7325f00b54289d9620d86f8d2
      ASTERISK_HOST: asterisk
      ASTERISK_PORT: 5038
      ASTERISK_USERNAME: admin
      ASTERISK_PASSWORD: asterisk_pass_2025
      ASTERISK_URL: http://asterisk:5038
      BITRIX24_WEBHOOK_URL: https://example.bitrix24.com/webhook/
      PORT: 3001
      LOG_LEVEL: info
    command: ["dumb-init", "--", "node", "/tmp/app_wrapper.js"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    image: dailer-frontend:latest
    container_name: dialer_frontend_ready
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
EOF

    log "  –ö–æ–ø–∏—Ä—É–µ–º wrapper –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
    docker cp /tmp/app_wrapper.js dialer_backend_ready:/tmp/app_wrapper.js 2>/dev/null || true
    
    log "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º..."
    docker compose -f docker-compose-fixed.yml stop backend
    docker compose -f docker-compose-fixed.yml rm -f backend
    docker compose -f docker-compose-fixed.yml up -d backend
    
    sleep 10
    
    echo "=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê API ==="
    for i in {1..5}; do
        if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
            log "üéâ –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê! API –†–ê–ë–û–¢–ê–ï–¢!"
            
            echo ""
            echo "üéâ üéâ üéâ –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê! üéâ üéâ üéâ"
            echo ""
            echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:"
            echo "  üõ£Ô∏è  –í–°–ï require() –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
            echo "  üì¶ –í–°–ï –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"
            echo "  üîí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            echo "  üê≥ Docker –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"
            echo "  üóÑÔ∏è  –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î –∏–∑ 10 —Ç–∞–±–ª–∏—Ü"
            echo "  üîß –ö–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω (wrapper)"
            echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
            echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
            echo ""
            echo "üåê PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!"
            echo "  Frontend:     http://localhost:3000"
            echo "  Backend API:  http://localhost:3001/health"
            echo "  Asterisk AMI: localhost:5038"
            echo "  PostgreSQL:   localhost:5432"
            echo "  Redis:        localhost:6379"
            echo ""
            echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!"
            echo "üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–õ–Ø PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø!"
            
            echo ""
            echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –í–°–ï–ô –°–ò–°–¢–ï–ú–´:"
            docker compose -f docker-compose-fixed.yml ps
            
            exit 0
        else
            log "–ü–æ–ø—ã—Ç–∫–∞ ${i}/5: API –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç..."
            sleep 5
        fi
    done
    
    log "‚ö†Ô∏è Wrapper –Ω–µ —Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    
else
    log "‚ùå Wrapper –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥"
fi

echo ""
echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ö–û–î–ê:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –õ–æ–≥–∏ backend –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞:"
docker logs dialer_backend_ready --tail 15 2>&1

echo ""
log "üéØ –ù–ê–ô–î–ï–ù–ê –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
log "üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ app.ts –Ω–∞ async/await –ø—Ä–æ–±–ª–µ–º—ã" 