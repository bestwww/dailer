#!/bin/bash

# –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DOCKER –ö–û–ù–§–õ–ò–ö–¢–û–í –ò –§–ò–ù–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï DOCKER –ö–û–ù–§–õ–ò–ö–¢–û–í!"

log "‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê:"
echo "  ‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: dialer_redis_ready —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
echo "  ‚ùå –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
echo "  ‚ùå Backend –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å"
echo "  üéØ –†–ï–®–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"

log "üõ†Ô∏è –®–ê–ì 1: –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ò –û–ß–ò–°–¢–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í..."

echo "=== –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• DIALER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
docker stop $(docker ps -q --filter "name=dialer_") 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö dialer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

echo "=== –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• DIALER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
docker rm -f $(docker ps -aq --filter "name=dialer_") 2>/dev/null || echo "–ù–µ—Ç dialer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"

echo "=== –ü–†–û–í–ï–†–ö–ê –û–ß–ò–°–¢–ö–ò ==="
REMAINING=$(docker ps -a --filter "name=dialer_" --format "{{.Names}}" 2>/dev/null)
if [ -z "$REMAINING" ]; then
    log "‚úÖ –í—Å–µ dialer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã"
else
    log "‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $REMAINING"
    docker rm -f $REMAINING 2>/dev/null || true
fi

log "üîß –®–ê–ì 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï DOCKER-COMPOSE (—É–±–∏—Ä–∞–µ–º version)..."

# –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π docker-compose –±–µ–∑ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ version
JWT_SECRET=$(openssl rand -hex 32)
log "  –ù–æ–≤—ã–π JWT_SECRET: ${JWT_SECRET:0:16}... (64 —Å–∏–º–≤–æ–ª–∞)"

cat > docker-compose-ready.yml << EOF
services:
  postgres:
    image: postgres:15-alpine
    container_name: dialer_postgres_ready
    environment:
      POSTGRES_DB: dialer
      POSTGRES_USER: dialer
      POSTGRES_PASSWORD: dialer_pass_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dialer -d dialer"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dialer_redis_ready
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  asterisk:
    image: mlan/asterisk:base
    container_name: dialer_asterisk_ready
    ports:
      - "5038:5038"  # AMI
      - "5060:5060/udp"  # SIP
      - "5060:5060/tcp"  # SIP TCP
      - "10000-10020:10000-10020/udp"  # RTP
    environment:
      ASTERISK_UID: 1000
      ASTERISK_GID: 1000
    healthcheck:
      test: ["CMD-SHELL", "asterisk -rx 'core show uptime' | grep -q 'System uptime'"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    image: dailer-backend-models-fixed:latest
    container_name: dialer_backend_ready
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://dialer:dialer_pass_2025@postgres:5432/dialer
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ASTERISK_HOST: asterisk
      ASTERISK_PORT: 5038
      ASTERISK_USERNAME: admin
      ASTERISK_PASSWORD: asterisk_pass_2025
      ASTERISK_URL: http://asterisk:5038
      BITRIX24_WEBHOOK_URL: https://example.bitrix24.com/webhook/
      PORT: 3001
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      asterisk:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    image: dailer-frontend:latest
    container_name: dialer_frontend_ready
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
EOF

log "‚úÖ DOCKER-COMPOSE –û–ë–ù–û–í–õ–ï–ù:"
echo "  üîß –£–±—Ä–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π version"
echo "  üîí –ù–æ–≤—ã–π JWT_SECRET: 64 —Å–∏–º–≤–æ–ª–∞"
echo "  üåê –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

log "üöÄ –®–ê–ì 3: –ß–ò–°–¢–´–ô –ó–ê–ü–£–°–ö –í–°–ï–ô –°–ò–°–¢–ï–ú–´..."

echo "=== –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í –° –ß–ò–°–¢–û–ì–û –õ–ò–°–¢–ê ==="
docker compose -f docker-compose-ready.yml up -d

log "‚è∞ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–°–ö–ê –°–ò–°–¢–ï–ú–´ (45 —Å–µ–∫—É–Ω–¥)..."

sleep 15

for i in {1..5}; do
    log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i}/5 (—á–µ—Ä–µ–∑ $((i*8)) —Å–µ–∫)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo "=== –°–¢–ê–¢–£–° –í–°–ï–• –ö–û–ù–¢–ï–ô–ù–ï–†–û–í ==="
    docker compose -f docker-compose-ready.yml ps
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend specifically
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    log "Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        
        sleep 3
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Config validation error"; then
            CONFIG_ERROR=$(echo "$LOGS" | grep "Config validation error" | head -1)
            log "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_ERROR"
            echo "=== –õ–û–ì–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ==="
            echo "$LOGS" | head -8
            
        elif echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è: $MODULE_ERROR"
            echo "=== –õ–û–ì–ò –ú–û–î–£–õ–ï–ô ==="
            echo "$LOGS" | head -8
            
        elif echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server)"; then
            log "üéâ BACKEND –°–ï–†–í–ï–† –ó–ê–ü–£–°–¢–ò–õ–°–Ø!"
            
            sleep 2
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:"
                echo "  üõ£Ô∏è  –í–°–ï require() –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
                echo "  üì¶ –í–°–ï –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"
                echo "  üîí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"
                echo "  üê≥ Docker –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"
                echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo ""
                echo "üåê PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk AMI: localhost:5038"
                echo "  PostgreSQL:   localhost:5432"
                echo "  Redis:        localhost:6379"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê!"
                echo "üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–õ–Ø PRODUCTION!"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç..."
                if [[ $i -eq 4 ]]; then
                    echo "=== –ü–†–û–í–ï–†–ö–ê API ==="
                    curl -v http://localhost:3001/health 2>&1 | head -5
                fi
            fi
        else
            log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏..."
            if [[ $i -eq 4 ]]; then
                echo "=== –ü–û–õ–ù–´–ï –õ–û–ì–ò BACKEND ==="
                echo "$LOGS"
            fi
        fi
    else
        log "üìä Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS"
        if [[ $i -eq 4 ]]; then
            echo "=== –õ–û–ì–ò –û–®–ò–ë–ö–ò BACKEND ==="
            docker logs dialer_backend_ready --tail 20 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    fi
    
    if [[ $i -lt 5 ]]; then
        sleep 8
    fi
done

echo ""
echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –§–ò–ù–ê–õ–¨–ù–´–ï –õ–û–ì–ò BACKEND:"
docker logs dialer_backend_ready --tail 25 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
    log "üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! API –î–û–°–¢–£–ü–ï–ù!"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend:  http://localhost:3001/health"
else
    log "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
fi 