#!/bin/bash

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• TYPESCRIPT –û–®–ò–ë–û–ö –ò –ü–ï–†–ï–°–ë–û–†–ö–ê

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TYPESCRIPT –û–®–ò–ë–û–ö –ò –ü–ï–†–ï–°–ë–û–†–ö–ê"

log "üìã –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï TYPESCRIPT –û–®–ò–ë–ö–ò:"
echo "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã –¥–ª—è asterisk-manager –º–æ–¥—É–ª—è"
echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å optional properties (callerIdNumber, lastError)"
echo "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω tslib –≤ devDependencies"
echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å unknown error types –≤ catch –±–ª–æ–∫–∞—Ö"
echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω protected query –º–µ—Ç–æ–¥ (–¥–æ–±–∞–≤–ª–µ–Ω executeQuery)"
echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –≤ log.error"
echo "  ‚úÖ –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è provider"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose-ready.yml down --remove-orphans 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ backend –æ–±—Ä–∞–∑–∞
log "üßπ –û—á–∏—Å—Ç–∫–∞ backend –æ–±—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏..."
docker images | grep "dailer-backend" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

log "üöÄ –ü–ï–†–ï–°–ë–û–†–ö–ê BACKEND –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú TYPESCRIPT..."

# –°–±–æ—Ä–∫–∞ backend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
docker compose -f docker-compose-ready.yml build backend --no-cache --progress=plain

BUILD_RESULT=$?

if [ $BUILD_RESULT -ne 0 ]; then
    log "‚ùå –°–ë–û–†–ö–ê BACKEND –í–°–ï –ï–©–ï –ù–ï –£–î–ê–õ–ê–°–¨"
    echo ""
    echo "üìù –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "  - –û—Å—Ç–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ TypeScript –æ—à–∏–±–∫–∏"
    echo "  - –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    echo "  - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ"
    echo ""
    log "üí° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"
    echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫"
    echo "  2. –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TypeScript:"
    echo "     cd backend && npm run typecheck"
    echo "  3. –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞:"
    echo "     cd backend && npm run build"
    
    exit 1
fi

log "‚úÖ BACKEND –°–û–ë–†–ê–ù –£–°–ü–ï–®–ù–û –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú TYPESCRIPT!"

# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
log "üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose-ready.yml up -d

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ (2 –º–∏–Ω—É—Ç—ã)
log "‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã (2 –º–∏–Ω—É—Ç—ã)..."

for i in $(seq 1 24); do
    sleep 5
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    POSTGRES_RUNNING=$(docker ps --filter "name=dialer_postgres_ready" --format "{{.Names}}" 2>/dev/null)
    REDIS_RUNNING=$(docker ps --filter "name=dialer_redis_ready" --format "{{.Names}}" 2>/dev/null)
    ASTERISK_RUNNING=$(docker ps --filter "name=dialer_asterisk_ready" --format "{{.Names}}" 2>/dev/null)
    BACKEND_RUNNING=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Names}}" 2>/dev/null)
    FRONTEND_RUNNING=$(docker ps --filter "name=dialer_frontend_ready" --format "{{.Names}}" 2>/dev/null)
    
    # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    RUNNING_COUNT=0
    SERVICES_STATUS=""
    
    if [ -n "$POSTGRES_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS PG‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS PG‚ùå"
    fi
    
    if [ -n "$REDIS_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Redis‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Redis‚ùå"
    fi
    
    if [ -n "$ASTERISK_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Asterisk‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Asterisk‚ùå"
    fi
    
    if [ -n "$BACKEND_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Backend‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Backend‚ùå"
    fi
    
    if [ -n "$FRONTEND_RUNNING" ]; then
        ((RUNNING_COUNT++))
        SERVICES_STATUS="$SERVICES_STATUS Frontend‚úÖ"
    else
        SERVICES_STATUS="$SERVICES_STATUS Frontend‚ùå"
    fi
    
    log "üìä –ó–∞–ø—É—â–µ–Ω–æ: $RUNNING_COUNT/5 |$SERVICES_STATUS ($((i*5)) —Å–µ–∫)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
    if [ $RUNNING_COUNT -eq 5 ]; then
        log "üéâ –í–°–ï 5 –°–ï–†–í–ò–°–û–í –ó–ê–ü–£–©–ï–ù–´!"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        sleep 15
        
        BACKEND_STATUS=$(docker compose -f docker-compose-ready.yml ps backend --format "{{.Status}}" 2>/dev/null)
        
        if echo "$BACKEND_STATUS" | grep -q "Up"; then
            log "‚úÖ Backend —Å—Ç–∞–±–∏–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
            sleep 10
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "‚úÖ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç!"
                
                log "üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:"
                docker compose -f docker-compose-ready.yml ps
                
                echo ""
                echo "üéâ –í–°–ï TYPESCRIPT –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!"
                echo "   ‚úÖ Backend —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ TypeScript"
                echo "   ‚úÖ Backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ production —Ä–µ–∂–∏–º–µ"
                echo "   ‚úÖ –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
                echo "   ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo ""
                echo "üåê Frontend:     http://localhost:3000"
                echo "üîß Backend API:  http://localhost:3001/health"
                echo "üìû Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                echo "üìû SIP –ø—Ä–æ–≤–µ—Ä–∫–∞: docker exec dialer_asterisk_ready asterisk -r -x 'pjsip show endpoints'"
                echo "üíæ PostgreSQL:   psql -h localhost -U dialer -d dialer"
                echo "üî¥ Redis:        redis-cli -h localhost"
                echo ""
                log "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
        else
            log "‚ùå Backend —Å–Ω–æ–≤–∞ —É–ø–∞–ª: $BACKEND_STATUS"
        fi
    fi
done

# –ï—Å–ª–∏ –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –∑–∞ 2 –º–∏–Ω—É—Ç—ã
log "‚ùå –ù–ï –í–°–ï –°–ï–†–í–ò–°–´ –ó–ê–ü–£–°–¢–ò–õ–ò–°–¨ –ó–ê 2 –ú–ò–ù–£–¢–´"

echo ""
echo "üìù –õ–æ–≥–∏ backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫):"
docker logs dialer_backend_ready --tail 30 2>/dev/null || echo "Backend –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
log "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
log "üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ:"
echo "     cd backend && npm install && npm run build"
echo "  3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è:"
echo "     docker compose -f docker-compose-ready.yml logs backend"

exit 1 