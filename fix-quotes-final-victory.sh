#!/bin/bash

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–í–´–ß–ï–ö –í REQUIRE

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–í–´–ß–ï–ö!"

log "‚úÖ –û–®–ò–ë–ö–ê –ù–ê–ô–î–ï–ù–ê:"
echo "  üìç –§–∞–π–ª: /app/dist/app.js:19"
echo "  ‚ùå –ö–æ–¥: const config_1 = require(./config\");"
echo "  ‚úÖ –ù–∞–¥–æ: const config_1 = require(\"./config\");"
echo "  üîß –ü—Ä–∏—á–∏–Ω–∞: sed —É–¥–∞–ª–∏–ª –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏ –≤ require()"

log "üõ†Ô∏è –®–ê–ì 1: –ò–ó–í–õ–ï–ö–ê–ï–ú –ò –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–ê–í–´–ß–ö–ò..."

# –ò–∑–≤–ª–µ–∫–∞–µ–º dist –∏–∑ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
TEMP_CONTAINER="temp_quotes_fix"
docker create --name $TEMP_CONTAINER dailer-backend-ultimate:latest
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_quotes
docker rm $TEMP_CONTAINER

log "  –ü—Ä–æ–≤–µ—Ä—è–µ–º app.js –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
echo "=== –°–¢–†–û–ö–ê 19 app.js –î–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ==="
sed -n '19p' temp_dist_quotes/app.js

log "  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ require()..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ require() –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
find temp_dist_quotes -name "*.js" -type f -exec sed -i 's|require(\./|require("./|g' {} \;
find temp_dist_quotes -name "*.js" -type f -exec sed -i 's|require(\.\./|require("../|g' {} \;

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏
find temp_dist_quotes -name "*.js" -type f -exec sed -i 's|require([^"'\'']*\./|require("./|g' {} \;
find temp_dist_quotes -name "*.js" -type f -exec sed -i 's|require([^"'\'']*\.\./|require("../|g' {} \;

log "  –ü—Ä–æ–≤–µ—Ä—è–µ–º app.js –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
echo "=== –°–¢–†–û–ö–ê 19 app.js –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ==="
sed -n '19p' temp_dist_quotes/app.js

log "‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï REQUIRE() –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨..."
echo "=== –ü–û–ò–°–ö –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• REQUIRE ==="
find temp_dist_quotes -name "*.js" -exec grep -n "require([^\"']" {} \; | head -5 || echo "‚úÖ –í—Å–µ require() –∏–º–µ—é—Ç –∫–∞–≤—ã—á–∫–∏!"

log "üöÄ –®–ê–ì 2: –°–û–ó–î–ê–ï–ú –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ë–ï–î–ù–´–ô –û–ë–†–ê–ó..."

cat > Dockerfile.final_victory << 'EOF'
FROM dailer-backend-ultimate:latest

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é dist –ø–∞–ø–∫—É
COPY temp_dist_quotes /app/dist

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["node", "dist/app.js"]
EOF

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
docker build -f Dockerfile.final_victory -t dailer-backend-final-victory:latest .

# –û—á–∏—Å—Ç–∫–∞
rm -rf temp_dist_quotes Dockerfile.final_victory

log "üîç –®–ê–ì 3: –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –û–ë–†–ê–ó–ê..."

echo "=== –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê app.js –ë–ï–ó –û–®–ò–ë–û–ö ==="
log "  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."

TEST_OUTPUT=$(docker run --rm \
    --network dialer-ready_dialer_network \
    -e NODE_ENV=production \
    -e DATABASE_URL=postgresql://dialer:dialer_pass_2025@postgres:5432/dialer \
    -e REDIS_URL=redis://redis:6379 \
    -e ASTERISK_URL=ami://admin:dailer_admin_2025@asterisk:5038 \
    -e JWT_SECRET=2ffe1d3e9df1ffe8e07a5c2940b8d2c56e8280b9bf42965027b5605e5cfe11c2 \
    dailer-backend-final-victory:latest \
    timeout 5 node dist/app.js 2>&1 || echo "TIMEOUT_OK")

if echo "$TEST_OUTPUT" | grep -q "SyntaxError"; then
    log "‚ùå –í–°–Å –ï–©–Å –û–®–ò–ë–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê:"
    echo "$TEST_OUTPUT" | grep -A 3 -B 3 "SyntaxError"
    exit 1
elif echo "$TEST_OUTPUT" | grep -q "Cannot find module"; then
    log "‚ùå –û–®–ò–ë–ö–ê –ú–û–î–£–õ–ï–ô:"
    echo "$TEST_OUTPUT" | grep "Cannot find module"
    exit 1
else
    log "‚úÖ –°–ò–ù–¢–ê–ö–°–ò–° –ò–°–ü–†–ê–í–õ–ï–ù! –§–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫!"
    
    if echo "$TEST_OUTPUT" | grep -q -E "(listening|ready|started|server)"; then
        log "üéâ BACKEND –°–ï–†–í–ï–† –ó–ê–ü–£–°–¢–ò–õ–°–Ø –í –¢–ï–°–¢–ï!"
    else
        log "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
    fi
fi

log "üöÄ –®–ê–ì 4: –û–ë–ù–û–í–õ–Ø–ï–ú COMPOSE –ò –ü–û–õ–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö..."

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ compose
sed -i 's|dailer-backend-ultimate:latest|dailer-backend-final-victory:latest|g' docker-compose-ready.yml

# –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
log "  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
docker compose -f docker-compose-ready.yml down

log "  –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º backend..."
docker compose -f docker-compose-ready.yml up -d

log "‚è∞ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´ (60 —Å–µ–∫—É–Ω–¥)..."

sleep 15

for i in {1..9}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    RUNNING_COUNT=$(docker compose -f docker-compose-ready.yml ps --format="{{.Status}}" | grep -c "Up" || echo "0")
    
    log "üìä –°—Ç–∞—Ç—É—Å: $RUNNING_COUNT/5 —Å–µ—Ä–≤–∏—Å–æ–≤, Backend: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ó–ê–ü–£–©–ï–ù!"
        
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 20 2>&1)
        
        if echo "$LOGS" | grep -q "SyntaxError"; then
            log "‚ùå –í–°–Å –ï–©–Å –û–®–ò–ë–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê –í –õ–û–ì–ê–•"
            echo "$LOGS" | grep -A 5 -B 5 "SyntaxError"
            break
            
        elif echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π: $MODULE_ERROR"
            break
            
        elif echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: $ERROR_MSG"
            break
            
        elif [[ -n "$LOGS" ]] && echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server|app listening)"; then
            log "‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            
            # API —Ç–µ—Å—Ç
            sleep 5
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –û–¢–í–ï–ß–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –ê–ë–°–û–õ–Æ–¢–ù–ê–Ø –ò –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê:"
                echo "  üéØ TypeScript path alias –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –í–°–ï–• —Ñ–∞–π–ª–∞—Ö"
                echo "  üîß –ö–∞–≤—ã—á–∫–∏ –≤ require() –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
                echo "  üíæ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫"
                echo "  üîê –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                echo "  üöÄ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç"
                echo ""
                echo "üåê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê:"
                echo "  üñ•Ô∏è  Frontend:     http://localhost:3000"
                echo "  üì° Backend API:  http://localhost:3001/health"
                echo "  ‚òéÔ∏è  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                echo "  üóÑÔ∏è  PostgreSQL:   docker exec -it dialer_postgres_ready psql -U dialer -d dialer"
                echo "  üîÑ Redis CLI:    docker exec -it dialer_redis_ready redis-cli"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%!"
                echo ""
                echo "üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
                echo "üî• –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –í –ü–û–õ–ù–û–ú –û–ë–™–Å–ú–ï!"
                echo ""
                echo "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
                docker compose -f docker-compose-ready.yml ps
                
                echo ""
                echo "üéä üéä üéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ü–û–õ–ù–û–ô –ü–û–ë–ï–î–û–ô! üéä üéä üéä"
                echo "üöÄ üöÄ üöÄ –°–ò–°–¢–ï–ú–ê –ù–ê 100% –†–ê–ë–û–ß–ê–Ø! üöÄ üöÄ üöÄ"
                
                exit 0
            else
                log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ localhost:3001/health (${i}*5 —Å–µ–∫)"
            fi
        else
            log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ—Ç –ª–æ–≥–æ–≤ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (${i}*5 —Å–µ–∫)"
            if [[ $i -eq 6 ]]; then
                echo "=== –¢–ï–ö–£–©–ò–ï –õ–û–ì–ò BACKEND ==="
                echo "$LOGS"
            fi
        fi
    else
        log "üìä Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
        if [[ $i -eq 6 ]]; then
            echo "=== –ü–û–ü–´–¢–ö–ê –ü–û–õ–£–ß–ò–¢–¨ –õ–û–ì–ò ==="
            docker logs dialer_backend_ready --tail 25 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        fi
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫..."

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üìù –õ–æ–≥–∏ backend –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
docker logs dialer_backend_ready --tail 40 2>&1 || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞:"
docker run --rm dailer-backend-final-victory:latest grep -n "require(" dist/app.js | head -3

exit 1 