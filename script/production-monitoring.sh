#!/bin/bash

# üîç –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# –ê–≤—Ç–æ—Ä: AI Assistant  
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./production-monitoring.sh [—Ä–µ–∂–∏–º]
# –†–µ–∂–∏–º—ã: 
#   check     - —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
#   monitor   - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
#   logs      - —Å–±–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
#   alert     - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVICES=("dialer_backend" "dialer_postgres" "dialer_redis" "dialer_freeswitch" "dialer_frontend")
LOG_DIR="./monitoring_logs"
ALERT_EMAIL="admin@company.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
MONITORING_INTERVAL=300  # 5 –º–∏–Ω—É—Ç
MAX_CPU_PERCENT=80
MAX_MEMORY_PERCENT=85
DISK_THRESHOLD=90

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        INFO)  echo -e "${GREEN}[$timestamp] INFO:${NC} $message" ;;
        WARN)  echo -e "${YELLOW}[$timestamp] WARN:${NC} $message" ;;
        ERROR) echo -e "${RED}[$timestamp] ERROR:${NC} $message" ;;
        DEBUG) echo -e "${BLUE}[$timestamp] DEBUG:${NC} $message" ;;
        *)     echo "[$timestamp] $level: $message" ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
send_alert() {
    local subject="$1"
    local message="$2"
    
    log ERROR "ALERT: $subject"
    echo "$message" | tee -a "$LOG_DIR/alerts_$(date +%Y%m%d).log"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ email (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ mail)
    # echo "$message" | mail -s "$subject" "$ALERT_EMAIL" 2>/dev/null || true
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram/Slack
    # curl -X POST "https://api.telegram.org/bot<TOKEN>/sendMessage" -d "chat_id=<CHAT_ID>&text=$subject: $message"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    local failed_services=()
    
    for service in "${SERVICES[@]}"; do
        if docker ps --filter "name=$service" --filter "status=running" --format "{{.Names}}" | grep -q "^$service$"; then
            log INFO "‚úÖ $service - —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            log ERROR "‚ùå $service - –ù–ï –†–ê–ë–û–¢–ê–ï–¢!"
            failed_services+=("$service")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
            local container_status=$(docker ps -a --filter "name=$service" --format "{{.Status}}")
            log ERROR "   –°—Ç–∞—Ç—É—Å: $container_status"
        fi
    done
    
    if [ ${#failed_services[@]} -gt 0 ]; then
        local alert_msg="–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã: ${failed_services[*]}"
        send_alert "Docker Services Down" "$alert_msg"
        return 1
    fi
    
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU –∏ –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
    while IFS= read -r line; do
        if [[ $line == *"CONTAINER"* ]]; then
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        fi
        
        local name=$(echo "$line" | awk '{print $1}')
        local cpu=$(echo "$line" | awk '{print $2}' | sed 's/%//')
        local mem_usage=$(echo "$line" | awk '{print $3}')
        local mem_percent=$(echo "$line" | awk '{print $4}' | sed 's/%//')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        if (( $(echo "$cpu > $MAX_CPU_PERCENT" | bc -l) )); then
            log WARN "‚ö†Ô∏è $name: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${cpu}%"
        fi
        
        if (( $(echo "$mem_percent > $MAX_MEMORY_PERCENT" | bc -l) )); then
            log WARN "‚ö†Ô∏è $name: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${mem_percent}% ($mem_usage)"
            send_alert "High Memory Usage" "$name –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${mem_percent}% –ø–∞–º—è—Ç–∏"
        fi
        
        log DEBUG "$name: CPU=${cpu}%, MEM=${mem_percent}% ($mem_usage)"
        
    done < <(docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}")
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏—Å–∫–∞
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    log DEBUG "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ /: ${disk_usage}%"
    
    if [ "$disk_usage" -gt "$DISK_THRESHOLD" ]; then
        log WARN "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: ${disk_usage}%"
        send_alert "Low Disk Space" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ Docker –¥–∞–Ω–Ω—ã—Ö
    local docker_size=$(docker system df --format "table {{.Type}}\t{{.Size}}" | grep -v TYPE)
    log DEBUG "–†–∞–∑–º–µ—Ä Docker –¥–∞–Ω–Ω—ã—Ö:"
    echo "$docker_size" | while read -r line; do
        log DEBUG "  $line"
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local large_logs=$(docker ps --format "{{.Names}}" | xargs -I {} sh -c 'size=$(docker logs {} 2>&1 | wc -c); if [ $size -gt 100000000 ]; then echo "{}: ${size} bytes"; fi' 2>/dev/null)
    
    if [ -n "$large_logs" ]; then
        log WARN "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
        echo "$large_logs" | while read -r line; do
            log WARN "  $line"
        done
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
check_database_connections() {
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö..."
    
    if docker exec dialer_postgres psql -U dialer_user -d dialer_db -c "SELECT 1;" >/dev/null 2>&1; then
        log INFO "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        local connections=$(docker exec dialer_postgres psql -U dialer_user -d dialer_db -t -c "SELECT count(*) FROM pg_stat_activity;" 2>/dev/null | xargs)
        log DEBUG "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î: $connections"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if [ "$connections" -gt 80 ]; then
            log WARN "‚ö†Ô∏è –ú–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î: $connections"
        fi
    else
        log ERROR "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
        send_alert "Database Connection Failed" "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
check_redis() {
    log INFO "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
    
    if docker exec dialer_redis redis-cli -a redis_password_123 ping >/dev/null 2>&1; then
        log INFO "‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ Redis
        local redis_memory=$(docker exec dialer_redis redis-cli -a redis_password_123 info memory 2>/dev/null | grep used_memory_human | cut -d: -f2 | tr -d '\r')
        log DEBUG "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis: $redis_memory"
    else
        log ERROR "‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        send_alert "Redis Connection Failed" "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –°–±–æ—Ä –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
collect_diagnostic_logs() {
    log INFO "–°–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤..."
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local diag_dir="$LOG_DIR/diagnostic_$timestamp"
    mkdir -p "$diag_dir"
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    {
        echo "=== SYSTEM INFO ==="
        date
        uptime
        free -h
        df -h
        echo ""
        
        echo "=== DOCKER INFO ==="
        docker version
        docker info
        echo ""
        
        echo "=== CONTAINER STATUS ==="
        docker ps -a
        echo ""
        
        echo "=== RESOURCE USAGE ==="
        docker stats --no-stream
        echo ""
        
        echo "=== NETWORK INFO ==="
        docker network ls
        docker network inspect dialer_dialer_network
        
    } > "$diag_dir/system_info.log"
    
    # –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    for service in "${SERVICES[@]}"; do
        log INFO "–°–æ–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è $service..."
        docker logs "$service" --since=24h > "$diag_dir/${service}_logs.log" 2>&1 || true
    done
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
    journalctl --since="24 hours ago" | grep -i docker > "$diag_dir/system_docker_logs.log" 2>&1 || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ OOM killer
    dmesg | grep -i "killed process" > "$diag_dir/oom_killer.log" 2>&1 || true
    
    log INFO "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $diag_dir"
    echo "$diag_dir"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
run_check() {
    log INFO "üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞..."
    
    local errors=0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    check_containers || ((errors++))
    check_resources || ((errors++))
    check_disk_space || ((errors++))
    check_database_connections || ((errors++))
    check_redis || ((errors++))
    
    if [ $errors -eq 0 ]; then
        log INFO "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        log ERROR "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $errors –ø—Ä–æ–±–ª–µ–º"
        return 1
    fi
}

# –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
run_monitoring() {
    log INFO "üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${MONITORING_INTERVAL}—Å)..."
    log INFO "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    local monitor_log="$LOG_DIR/monitoring_$(date +%Y%m%d).log"
    
    while true; do
        {
            echo "=================================="
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ $(date)"
            echo "=================================="
            
            if run_check; then
                echo "–°—Ç–∞—Ç—É—Å: –û–ö"
            else
                echo "–°—Ç–∞—Ç—É—Å: –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´"
            fi
            
            echo ""
        } | tee -a "$monitor_log"
        
        sleep $MONITORING_INTERVAL
    done
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    cat << EOF
üîç –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [—Ä–µ–∂–∏–º]

–†–µ–∂–∏–º—ã:
  check     - —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  monitor   - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  logs      - —Å–±–æ—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤
  alert     - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–ª–µ—Ä—Ç–æ–≤
  help      - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  $0                    # –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  $0 check              # –¢–æ –∂–µ —Å–∞–º–æ–µ
  $0 monitor            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  $0 logs               # –°–æ–±—Ä–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: $LOG_DIR/

EOF
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local mode="${1:-check}"
    
    case "$mode" in
        "check"|"")
            run_check
            ;;
        "monitor")
            run_monitoring
            ;;
        "logs")
            collect_diagnostic_logs
            ;;
        "alert")
            if ! run_check; then
                send_alert "System Check Failed" "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–¥–æ–∑–≤–æ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞."
            fi
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log ERROR "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode"
            show_help
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
trap 'log INFO "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..."; exit 0' SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫
main "$@" 