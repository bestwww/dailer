#!/bin/bash

# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ë–û–†–ö–ê ASTERISK 22.5.0
# Multi-stage build –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞

set -e

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ë–û–†–ö–ê ASTERISK 22.5.0"

# –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê DOCKER
log "üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê DOCKER..."
docker compose down --remove-orphans --timeout 10 2>/dev/null || true
docker system prune -af --volumes 2>/dev/null || true

log "üîç –ü–†–û–í–ï–†–ö–ê –†–ï–°–£–†–°–û–í:"
echo "üíæ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
df -h | grep -E "(Filesystem|/dev/)"
echo "üß† –ü–∞–º—è—Ç—å:"
free -h
echo "üî• CPU:"
nproc

log "üìã –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–†–´–• –û–ë–†–ê–ó–û–í ASTERISK..."
docker images | grep asterisk | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

log "üîß –°–û–ó–î–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û DOCKER-COMPOSE..."
cat > docker-compose-optimized.yml << 'EOF'
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: dialer_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dialer}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dialer_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dialer_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    networks:
      - dialer_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  asterisk:
    build:
      context: ./docker/asterisk
      dockerfile: Dockerfile-optimized
      target: production
    container_name: dialer_asterisk_optimized
    environment:
      - ASTERISK_UID=1001
      - ASTERISK_GID=1001
    ports:
      - "5060:5060/udp"
      - "5060:5060/tcp" 
      - "5038:5038/tcp"
      - "10000-20000:10000-20000/udp"
    networks:
      - dialer_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dialer_backend
    environment:
      - NODE_ENV=production
      - VOIP_PROVIDER=${VOIP_PROVIDER:-asterisk}
      - ASTERISK_HOST=asterisk
      - ASTERISK_PORT=${ASTERISK_PORT:-5038}
      - ASTERISK_USERNAME=${ASTERISK_USERNAME:-admin}
      - ASTERISK_PASSWORD=${ASTERISK_PASSWORD:-admin}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/${POSTGRES_DB:-dialer}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - SIP_CALLER_ID_NUMBER=${SIP_CALLER_ID_NUMBER:-9058615815}
    ports:
      - "3001:3001"
    networks:
      - dialer_network
    restart: unless-stopped
    depends_on:
      - asterisk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dialer_frontend
    ports:
      - "3000:3000"
    networks:
      - dialer_network
    restart: unless-stopped
    depends_on:
      - backend

networks:
  dialer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
EOF

log "üîß –°–û–ó–î–ê–ù–ò–ï .env –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ë–û–†–ö–ò..."
cat > .env << 'EOF'
VOIP_PROVIDER=asterisk
ASTERISK_HOST=asterisk
ASTERISK_PORT=5038
ASTERISK_USERNAME=admin
ASTERISK_PASSWORD=admin
SIP_CALLER_ID_NUMBER=9058615815
SIP_PROVIDER_HOST=62.141.121.197
SIP_PROVIDER_PORT=5070
EXTERNAL_IP=auto
POSTGRES_DB=dialer
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123
REDIS_PASSWORD=redis123
EOF

log "üèóÔ∏è –≠–¢–ê–ü 1: –°–±–æ—Ä–∫–∞ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û Asterisk –æ–±—Ä–∞–∑–∞..."
log "‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 5-10 –º–∏–Ω—É—Ç"
log "üì¶ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 300-500MB (–≤–º–µ—Å—Ç–æ 1.53GB)"

BUILD_START=$(date +%s)

# –°–±–æ—Ä–∫–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
docker compose -f docker-compose-optimized.yml build asterisk --no-cache --progress=plain

BUILD_END=$(date +%s)
BUILD_TIME=$((BUILD_END - BUILD_START))

log "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ $BUILD_TIME —Å–µ–∫—É–Ω–¥"

log "üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ê –û–ë–†–ê–ó–ê:"
ASTERISK_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" | grep asterisk | head -1)
echo "üéØ –ù–æ–≤—ã–π –æ–±—Ä–∞–∑: $ASTERISK_IMAGE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
IMAGE_SIZE=$(docker images --format "{{.Size}}" | grep -E "[0-9]+MB|[0-9.]+GB" | head -1)
log "üì¶ –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: $IMAGE_SIZE"

if echo "$IMAGE_SIZE" | grep -q "GB"; then
    log "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±—Ä–∞–∑ –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π ($IMAGE_SIZE)"
else
    log "‚úÖ –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: $IMAGE_SIZE"
fi

log "üß™ –≠–¢–ê–ü 2: –¢–µ—Å—Ç –æ–±—Ä–∞–∑–∞..."

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–∑–∞
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞..."
timeout 30 docker run --rm dialer-asterisk:latest asterisk -V || {
    log "‚ùå –û–±—Ä–∞–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    exit 1
}

log "‚úÖ –û–±—Ä–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

log "üöÄ –≠–¢–ê–ü 3: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."

# –ü–æ—ç—Ç–∞–ø–Ω—ã–π –∑–∞–ø—É—Å–∫
log "1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ PostgreSQL + Redis..."
docker compose -f docker-compose-optimized.yml up postgres redis -d

log "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 15

log "2Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Asterisk..."
docker compose -f docker-compose-optimized.yml up asterisk -d

log "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Asterisk (30 —Å–µ–∫)..."
sleep 30

log "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Asterisk:"
docker compose -f docker-compose-optimized.yml ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Asterisk
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Asterisk:"
timeout 10 docker logs dialer_asterisk_optimized --tail 20 2>&1 || log "‚ö†Ô∏è –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
if docker ps | grep -q dialer_asterisk_optimized; then
    log "‚úÖ Asterisk –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    
    # –¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏
    timeout 10 docker exec dialer_asterisk_optimized asterisk -V 2>/dev/null && {
        log "üéâ Asterisk –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã!"
    } || log "‚ö†Ô∏è Asterisk –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
else
    log "‚ùå Asterisk –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï –∑–∞–ø—É—â–µ–Ω"
    log "üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º..."
    docker ps -a | grep asterisk || log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
    exit 1
fi

log "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Backend..."
docker compose -f docker-compose-optimized.yml up backend -d
sleep 15

log "4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Frontend..."
docker compose -f docker-compose-optimized.yml up frontend -d
sleep 10

log "üìä –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:"
docker compose -f docker-compose-optimized.yml ps

log "üß™ –¢–ï–°–¢–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:"
echo "Frontend: curl http://localhost:3000"
echo "Backend Health: curl http://localhost:3001/health"
echo "Asterisk AMI: telnet localhost 5038"

log "‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
log ""
log "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:"
log "   ‚úÖ Multi-stage build –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä"
log "   ‚úÖ –¢–æ–ª—å–∫–æ runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–∑–µ"
log "   ‚úÖ Asterisk 22.5.0 LTS –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
log "   ‚úÖ Healthcheck –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
log "   ‚úÖ –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: $BUILD_TIME —Å–µ–∫—É–Ω–¥"
log ""
log "üìù –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:"
log "   docker compose -f docker-compose-optimized.yml [–∫–æ–º–∞–Ω–¥–∞]" 