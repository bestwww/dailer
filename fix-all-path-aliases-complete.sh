#!/bin/bash

# –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• PATH ALIAS –í–û –í–°–ï–• –§–ê–ô–õ–ê–•

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–°–ï–• PATH ALIAS"

log "‚úÖ –ü–†–û–ì–†–ï–°–°:"
echo "  üîê JWT_SECRET –¥–æ–±–∞–≤–ª–µ–Ω"
echo "  üìù –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
echo "  ‚ùå Path alias –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"

log "üîç –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´:"
echo "  Error: Cannot find module './config' –≤ utils/logger.js"
echo "  –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ app.js, –Ω–æ –ù–ï –≤—Å–µ —Ñ–∞–π–ª—ã"
echo "  –ù—É–∂–Ω–æ —É–º–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π"

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π backend –æ–±—Ä–∞–∑
BACKEND_IMAGE="dailer-backend-fixed:latest"

log "üõ†Ô∏è –ò–ó–í–õ–ï–ö–ê–ï–ú –ò –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï –§–ê–ô–õ–´..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
TEMP_CONTAINER="temp_full_fix"
docker create --name $TEMP_CONTAINER $BACKEND_IMAGE
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_full
docker rm $TEMP_CONTAINER

log "üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –°–¢–†–£–ö–¢–£–†–£ DIST:"
echo "=== –°–¢–†–£–ö–¢–£–†–ê DIST ==="
find temp_dist_full -type f -name "*.js" | head -10

log "üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï –ê–õ–ò–ê–°–´ –° –£–ß–ï–¢–û–ú –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–• –ü–£–¢–ï–ô..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã –ø–∞–ø–∫–∏
fix_aliases_for_depth() {
    local depth=$1
    local prefix=""
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
    for ((i=0; i<depth; i++)); do
        prefix="../$prefix"
    done
    
    echo "–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª—è –≥–ª—É–±–∏–Ω—ã $depth (–ø—Ä–µ—Ñ–∏–∫—Å: $prefix)"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –¥–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω–µ
    case $depth in
        0) # –ö–æ—Ä–µ–Ω—å dist/
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/config|require(\"./config|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/utils|require(\"./utils|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/services|require(\"./services|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/models|require(\"./models|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/controllers|require(\"./controllers|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/middleware|require(\"./middleware|g" {} \;
            find temp_dist_full -maxdepth 1 -name "*.js" -type f -exec sed -i "s|require(\"@/types|require(\"./types|g" {} \;
            ;;
        1) # –ü–∞–ø–∫–∏ –Ω–∞ –≥–ª—É–±–∏–Ω–µ 1 (utils/, services/, etc.)
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/config|require(\"../config|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/utils|require(\"../utils|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/services|require(\"../services|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/models|require(\"../models|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/controllers|require(\"../controllers|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/middleware|require(\"../middleware|g" {} \;
            find temp_dist_full -mindepth 2 -maxdepth 2 -name "*.js" -type f -exec sed -i "s|require(\"@/types|require(\"../types|g" {} \;
            ;;
        2) # –ü–∞–ø–∫–∏ –Ω–∞ –≥–ª—É–±–∏–Ω–µ 2 
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/config|require(\"../../config|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/utils|require(\"../../utils|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/services|require(\"../../services|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/models|require(\"../../models|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/controllers|require(\"../../controllers|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/middleware|require(\"../../middleware|g" {} \;
            find temp_dist_full -mindepth 3 -maxdepth 3 -name "*.js" -type f -exec sed -i "s|require(\"@/types|require(\"../../types|g" {} \;
            ;;
    esac
}

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –≥–ª—É–±–∏–Ω—ã
fix_aliases_for_depth 0
fix_aliases_for_depth 1  
fix_aliases_for_depth 2

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º import statements –µ—Å–ª–∏ –µ—Å—Ç—å
find temp_dist_full -name "*.js" -type f -exec sed -i 's|from "@/config|from "./config|g' {} \;
find temp_dist_full -name "*.js" -type f -exec sed -i 's|from "@/utils|from "../utils|g' {} \;
find temp_dist_full -name "*.js" -type f -exec sed -i 's|from "@/services|from "../services|g' {} \;

log "‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:"
echo "=== –ü–†–û–ë–õ–ï–ú–ù–´–ô –§–ê–ô–õ utils/logger.js ==="
if [ -f temp_dist_full/utils/logger.js ]; then
    echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ 14 (–±—ã–ª–∞ –æ—à–∏–±–∫–∞):"
    sed -n '14p' temp_dist_full/utils/logger.js
    echo ""
    echo "–í—Å–µ require –≤ logger.js:"
    grep "require(" temp_dist_full/utils/logger.js | head -5
else
    echo "–§–∞–π–ª utils/logger.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""
echo "=== –ü–†–û–í–ï–†–ö–ê –í–°–ï–• @/ –ê–õ–ò–ê–°–û–í (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ) ==="
grep -r "@/" temp_dist_full/ | head -5 || echo "‚úÖ –í—Å–µ @/ –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"

log "üöÄ –°–û–ó–î–ê–ï–ú –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ó..."

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dockerfile
cat > Dockerfile.fully_patched << 'EOF'
FROM dailer-backend-fixed:latest

# –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é dist –ø–∞–ø–∫—É
COPY temp_dist_full /app/dist

# –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

CMD ["node", "dist/app.js"]
EOF

# –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑
docker build -f Dockerfile.fully_patched -t dailer-backend-fully-fixed:latest .

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose
sed -i 's|dailer-backend-fixed:latest|dailer-backend-fully-fixed:latest|g' docker-compose-ready.yml

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -rf temp_dist_full Dockerfile.fully_patched

log "üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –° –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –ö–û–î–û–ú..."

docker compose -f docker-compose-ready.yml stop backend
docker compose -f docker-compose-ready.yml rm -f backend
docker compose -f docker-compose-ready.yml up -d backend

log "‚è∞ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (60 —Å–µ–∫—É–Ω–¥)..."

sleep 15

for i in {1..9}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS"
        
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 20 2>&1)
        
        if echo "$LOGS" | grep -q "Cannot find module"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –º–æ–¥—É–ª–µ–π: $ERROR_MSG"
        elif echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: $ERROR_MSG"
        else
            log "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö –ú–û–î–£–õ–ï–ô!"
            
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                
                echo ""
                echo "üéâ üéâ üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ò –†–ê–ë–û–¢–ê–ï–¢! üéâ üéâ üéâ"
                echo ""
                echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:"
                echo "  üéØ TypeScript path alias –ü–û–õ–ù–û–°–¢–¨–Æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö"
                echo "  üîê JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
                echo "  üìù –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                echo ""
                echo "üåê –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê:"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo "  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                echo ""
                echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%!"
                echo ""
                echo "üéØ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ SIP –ó–í–û–ù–ö–û–í!"
                
                docker compose -f docker-compose-ready.yml ps
                
                exit 0
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (${i}*5 —Å–µ–∫)"
            fi
        fi
    else
        log "üìä Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..."
echo ""
echo "üìù –õ–æ–≥–∏ backend:"
docker logs dialer_backend_ready --tail 30

exit 1 