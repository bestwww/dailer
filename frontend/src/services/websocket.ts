import { io, type Socket } from 'socket.io-client'
import type { RealTimeEvent } from '@/types'

// WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class WebSocketService {
  private socket: Socket | null = null
  private eventListeners: Map<string, Function[]> = new Map()
  private reconnectAttempts = 0
  private maxReconnectAttempts = 5
  private reconnectDelay = 1000

  constructor() {
    this.connect()
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
   */
  connect(): void {
    const url = import.meta.env.VITE_WS_URL || 'http://localhost:3000'
    
    this.socket = io(url, {
      autoConnect: true,
      reconnection: true,
      reconnectionAttempts: this.maxReconnectAttempts,
      reconnectionDelay: this.reconnectDelay,
      transports: ['websocket', 'polling']
    })

    this.setupEventHandlers()
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventHandlers(): void {
    if (!this.socket) return

    // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('connect', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
      this.reconnectAttempts = 0
      this.emit('connection', { status: 'connected' })
    })

    // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error: Error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
      this.handleReconnect()
    })

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('disconnect', (reason: string) => {
      console.warn('‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason)
      this.emit('connection', { status: 'disconnected', reason })
    })

    // Real-time —Å–æ–±—ã—Ç–∏—è –¥–∏–∞–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã
    this.socket.on('call_started', (data: any) => {
      console.log('üîî WebSocket —Å–æ–±—ã—Ç–∏–µ call_started:', data)
      this.emit('call_started', data)
    })

    this.socket.on('call_completed', (data: any) => {
      console.log('üîî WebSocket —Å–æ–±—ã—Ç–∏–µ call_completed:', data)
      this.emit('call_completed', data)
    })

    this.socket.on('call_failed', (data: any) => {
      console.log('üîî WebSocket —Å–æ–±—ã—Ç–∏–µ call_failed:', data)
      this.emit('call_failed', data)
    })

    this.socket.on('campaign_updated', (data: any) => {
      console.log('üîî WebSocket —Å–æ–±—ã—Ç–∏–µ campaign_updated –ø–æ–ª—É—á–µ–Ω–æ:', data)
      this.emit('campaign_updated', data)
    })

    this.socket.on('system_stats', (data: any) => {
      console.log('üîî WebSocket —Å–æ–±—ã—Ç–∏–µ system_stats:', data)
      this.emit('system_stats', data)
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  private handleReconnect(): void {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`)
      
      setTimeout(() => {
        if (this.socket) {
          this.socket.connect()
        }
      }, this.reconnectDelay * this.reconnectAttempts)
    } else {
      console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
      this.emit('connection', { status: 'failed' })
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
   */
  on(event: string, callback: Function): void {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, [])
    }
    this.eventListeners.get(event)!.push(callback)
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
   */
  off(event: string, callback?: Function): void {
    if (!this.eventListeners.has(event)) return

    if (callback) {
      const listeners = this.eventListeners.get(event)!
      const index = listeners.indexOf(callback)
      if (index !== -1) {
        listeners.splice(index, 1)
      }
    } else {
      this.eventListeners.delete(event)
    }
  }

  /**
   * –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   */
  private emit(event: string, data: any): void {
    const listeners = this.eventListeners.get(event) || []
    listeners.forEach(callback => {
      try {
        callback(data)
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error)
      }
    })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  send(event: string, data?: any): void {
    if (this.socket && this.socket.connected) {
      this.socket.emit(event, data)
    } else {
      console.warn('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', event, data)
    }
  }

  /**
   * –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  joinCampaignRoom(campaignId: number): void {
    this.send('join_campaign', { campaignId })
  }

  /**
   * –ü–æ–∫–∏–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∫–∞–º–ø–∞–Ω–∏–∏
   */
  leaveCampaignRoom(campaignId: number): void {
    this.send('leave_campaign', { campaignId })
  }

  /**
   * –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
   */
  requestStats(): void {
    this.send('get_stats')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  get isConnected(): boolean {
    return this.socket?.connected || false
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket
   */
  disconnect(): void {
    if (this.socket) {
      this.socket.disconnect()
      this.socket = null
    }
    this.eventListeners.clear()
  }

  /**
   * –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
   */
  reconnect(): void {
    this.disconnect()
    this.reconnectAttempts = 0
    this.connect()
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const wsService = new WebSocketService()
export default wsService 