#!/bin/bash

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JEST –ü–†–û–ë–õ–ï–ú–´ –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö BACKEND

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JEST –ü–†–û–ë–õ–ï–ú–´"

log "üìã –ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:"
echo "  ‚ùå Backend –∑–∞–ø—É—Å–∫–∞–ª —Å—Ç–∞–¥–∏—é 'test' –≤–º–µ—Å—Ç–æ 'production'"
echo "  ‚ùå Jest –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Å exit code 1 (No tests found)"
echo "  ‚ùå Docker –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑-–∑–∞ —Å–±–æ—è"

log "‚úÖ –ü–†–ò–ú–ï–ù–Å–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:"
echo "  ‚úÖ docker-compose-ready.yml: target: production"
echo "  ‚úÖ backend/package.json: test: 'jest --passWithNoTests'"
echo "  ‚úÖ backend/Dockerfile: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ .ts —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤"

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose-ready.yml down --remove-orphans 2>/dev/null || true

# –û—á–∏—Å—Ç–∫–∞ backend –æ–±—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
log "üßπ –û—á–∏—Å—Ç–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
docker images | grep "dailer-backend" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

log "üöÄ –ü–ï–†–ï–°–ë–û–†–ö–ê BACKEND –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò..."

# –°–±–æ—Ä–∫–∞ backend —Å target: production
docker compose -f docker-compose-ready.yml build backend --no-cache --progress=plain

BUILD_RESULT=$?

if [ $BUILD_RESULT -ne 0 ]; then
    log "‚ùå –°–ë–û–†–ö–ê BACKEND –ù–ï –£–î–ê–õ–ê–°–¨"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤—ã—à–µ"
    exit 1
fi

log "‚úÖ Backend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω —Å production target!"

# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
log "üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose-ready.yml up -d

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ (90 —Å–µ–∫—É–Ω–¥)
log "‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞ backend (90 —Å–µ–∫—É–Ω–¥)..."

for i in $(seq 1 18); do
    sleep 5
    
    BACKEND_STATUS=$(docker compose -f docker-compose-ready.yml ps backend --format "{{.Status}}" 2>/dev/null)
    
    log "üìä Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS ($((i*5)) —Å–µ–∫)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ backend –∑–∞–ø—É—â–µ–Ω –∏ —Å—Ç–∞–±–∏–ª–µ–Ω
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        # –ñ–¥–µ–º –µ—â–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        sleep 15
        
        FINAL_STATUS=$(docker compose -f docker-compose-ready.yml ps backend --format "{{.Status}}" 2>/dev/null)
        
        if echo "$FINAL_STATUS" | grep -q "Up"; then
            log "üéâ BACKEND –ó–ê–ü–£–©–ï–ù –ò –°–¢–ê–ë–ò–õ–ï–ù!"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
            sleep 10
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
                RUNNING_COUNT=$(docker ps --filter "name=dialer_.*_ready" --format "{{.Names}}" | wc -l)
                
                log "üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:"
                docker compose -f docker-compose-ready.yml ps
                
                if [ $RUNNING_COUNT -eq 5 ]; then
                    log "üéØ –í–°–ï 5 –°–ï–†–í–ò–°–û–í –†–ê–ë–û–¢–ê–Æ–¢!"
                    echo ""
                    echo "üéâ JEST –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!"
                    echo "   ‚úÖ Backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ production —Ä–µ–∂–∏–º–µ"
                    echo "   ‚úÖ Jest –±–æ–ª—å—à–µ –Ω–µ –∫—Ä–∞—à–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
                    echo "   ‚úÖ –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
                    echo ""
                    echo "üåê Frontend:     http://localhost:3000"
                    echo "üîß Backend API:  http://localhost:3001/health"
                    echo "üìû Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                    echo "üìû SIP –ø—Ä–æ–≤–µ—Ä–∫–∞: docker exec dialer_asterisk_ready asterisk -r -x 'pjsip show endpoints'"
                    echo "üíæ PostgreSQL:   psql -h localhost -U dialer -d dialer"
                    echo "üî¥ Redis:        redis-cli -h localhost"
                    echo ""
                    log "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
                    
                    exit 0
                else
                    log "‚ö†Ô∏è Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ($RUNNING_COUNT/5)"
                fi
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
            fi
        else
            log "‚ùå Backend —Å–Ω–æ–≤–∞ —É–ø–∞–ª: $FINAL_STATUS"
            break
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏
    if echo "$BACKEND_STATUS" | grep -q "Restarting"; then
        log "‚ö†Ô∏è Backend –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
    fi
done

# –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞
log "‚ùå BACKEND –ù–ï –ó–ê–ü–£–°–¢–ò–õ–°–Ø –ó–ê 90 –°–ï–ö–£–ù–î"

echo ""
echo "üìù –°–≤–µ–∂–∏–µ –ª–æ–≥–∏ backend (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫):"
docker logs dialer_backend_ready --tail 30 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
log "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
log "üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"
echo "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ target: production —Ä–∞–±–æ—Ç–∞–µ—Ç:"
echo "     docker inspect dailer-backend:latest | grep -A10 -B10 production"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:"
echo "     docker exec dialer_backend_ready ps aux"
echo "  3. –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
echo "     docker exec -it dialer_backend_ready npm test"

exit 1 