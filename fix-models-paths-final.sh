#!/bin/bash

# лўлАлЪлалљлњлЏлЋлЮлўлЋ лЪлБлблЋлЎ лњ MODELS лцлљлЎлЏлљлЦ

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "­Ъј» лўлАлЪлалљлњлЏлЋлЮлўлЋ лЪлБлблЋлЎ лњ MODELS лцлљлЎлЏлљлЦ!"

log "РюЁ лЉлълЏлглелълЎ лЪлалълЊлалЋлАлА лЪлълћлблњлЋлалќлћлЋлЮ:"
echo "  РюЁ лњЛЂлх л┐ЛЃЛѓлИ л▓ services/dialer.js лИЛЂл┐Лђл░л▓л╗лхлйЛІ л┐Лђл░л▓лИл╗ЛїлйлЙ!"
echo "  РюЁ models: require('../models/campaign') РюЊ"
echo "  РюЁ config: require('../config') РюЊ"  
echo "  РюЁ utils: require('../utils/logger') РюЊ"
echo "  РЮї лЮлълњлљл» лЪлалълЉлЏлЋлюлљ: Cannot find module './config/database'"
echo "  ­ЪЊЇ лњЛІлилЙл▓ лИли: models/campaign.js"
echo "  ­Ъј» лўли models/ л┐Лђл░л▓лИл╗ЛїлйЛІл╣ л┐ЛЃЛѓЛї: ../config/database"

log "­ЪЏа№ИЈ лелљлЊ 1: лўлЌлњлЏлЋлДлЋлЮлўлЋ лў лљлЮлљлЏлўлЌ MODELS лЪлБлблЋлЎ..."

# лўлил▓л╗лхл║л░лхл╝ dist лИли Лѓлхл║ЛЃЛЅлхл│лЙ лЙл▒Лђл░лил░
TEMP_CONTAINER="temp_models_fix"
docker create --name $TEMP_CONTAINER dailer-backend-all-paths-fixed:latest
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_models
docker rm $TEMP_CONTAINER

log "  лљлйл░л╗лИлилИЛђЛЃлхл╝ лњлАлЋ require() л┐ЛЃЛѓлИ л▓ models Лёл░л╣л╗л░ЛЁ..."

echo "=== REQUIRE лњ MODELS/CAMPAIGN.JS ==="
grep -n "require(" temp_dist_models/models/campaign.js | head -10

echo "=== REQUIRE лњ MODELS/CONTACT.JS ==="
grep -n "require(" temp_dist_models/models/contact.js | head -5

echo "=== REQUIRE лњ MODELS/CALL-RESULT.JS ==="
grep -n "require(" temp_dist_models/models/call-result.js | head -5

echo "=== REQUIRE лњ MODELS/BLACKLIST.JS ==="
grep -n "require(" temp_dist_models/models/blacklist.js | head -5

log "­ЪћД лелљлЊ 2: лўлАлЪлалљлњлЏлЋлЮлўлЋ лЪлБлблЋлЎ лњ MODELS лцлљлЎлЏлљлЦ..."

log "  лўЛЂл┐Лђл░л▓л╗ЛЈлхл╝ л┐ЛЃЛѓлИ л║ config л▓ models Лёл░л╣л╗л░ЛЁ..."
# лўЛЂл┐Лђл░л▓л╗ЛЈлхл╝ л▓лЙ л▓ЛЂлхЛЁ models Лёл░л╣л╗л░ЛЁ л┐ЛЃЛѓлИ л║ config
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./config/database")|require("../config/database")|g' {} \;
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./config/index")|require("../config/index")|g' {} \;
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./config")|require("../config")|g' {} \;

log "  лўЛЂл┐Лђл░л▓л╗ЛЈлхл╝ л┐ЛЃЛѓлИ л║ utils л▓ models Лёл░л╣л╗л░ЛЁ..."
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./utils/|require("../utils/|g' {} \;

log "  лўЛЂл┐Лђл░л▓л╗ЛЈлхл╝ л┐ЛЃЛѓлИ л║ services л▓ models Лёл░л╣л╗л░ЛЁ..."
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./services/|require("../services/|g' {} \;

log "  лўЛЂл┐Лђл░л▓л╗ЛЈлхл╝ л┐ЛЃЛѓлИ л║ types л▓ models Лёл░л╣л╗л░ЛЁ..."
find temp_dist_models/models -name "*.js" -exec sed -i 's|require("./types")|require("../types")|g' {} \;

log "РюЁ лЪлалълњлЋлал»лЋлю лалЋлЌлБлЏлглблљлб лўлАлЪлалљлњлЏлЋлЮлўл» MODELS лЪлБлблЋлЎ:"

echo "=== CONFIG REQUIRES лњ MODELS/CAMPAIGN.JS лЪлълАлЏлЋ лўлАлЪлалљлњлЏлЋлЮлўл» ==="
grep -n "require.*config" temp_dist_models/models/campaign.js | head -3

echo "=== UTILS REQUIRES лњ MODELS лЪлълАлЏлЋ лўлАлЪлалљлњлЏлЋлЮлўл» ==="
grep -n "require.*utils" temp_dist_models/models/*.js | head -3

echo "=== SERVICES REQUIRES лњ MODELS лЪлълАлЏлЋ лўлАлЪлалљлњлЏлЋлЮлўл» ==="
grep -n "require.*services" temp_dist_models/models/*.js | head -3

log "­Ъџђ лелљлЊ 3: лАлълЌлћлљлЮлўлЋ лълЉлалљлЌлљ лА лўлАлЪлалљлњлЏлЋлЮлЮлФлюлў MODELS..."

cat > Dockerfile.models_fixed << 'EOF'
FROM dailer-backend-all-paths-fixed:latest

# лџлЙл┐лИЛђЛЃлхл╝ л┐лЙл╗лйлЙЛЂЛѓЛїЛј лИЛЂл┐Лђл░л▓л╗лхлйлйЛЃЛј dist л┐л░л┐л║ЛЃ ЛЂ models л┐ЛЃЛѓЛЈл╝лИ
COPY temp_dist_models /app/dist

# лЪЛђл░л▓л░ л┤лЙЛЂЛѓЛЃл┐л░
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

# лал░л▒лЙЛЄл░ЛЈ л┤лИЛђлхл║ЛѓлЙЛђлИЛЈ
WORKDIR /app

# лџлЙл╝л░лйл┤л░ лил░л┐ЛЃЛЂл║л░
CMD ["node", "dist/app.js"]
EOF

# лАлЙл▒лИЛђл░лхл╝ лЙл▒Лђл░ли ЛЂ лИЛЂл┐Лђл░л▓л╗лхлйлйЛІл╝лИ models
docker build -f Dockerfile.models_fixed -t dailer-backend-models-fixed:latest .

# лъЛЄлИЛЂЛѓл║л░
rm -rf temp_dist_models Dockerfile.models_fixed

log "­ЪћЇ лелљлЊ 4: лблЋлАлб лўлАлЪлалљлњлЏлЋлЮлЮлФлЦ MODELS лЪлБлблЋлЎ..."

echo "=== лблЋлАлб: лЪлалълњлЋлалџлљ лўлАлЪлалљлњлЏлЋлЮлЮлФлЦ CONFIG лЪлБлблЋлЎ лњ MODELS ==="
docker run --rm dailer-backend-models-fixed:latest grep -n "require.*config" /app/dist/models/campaign.js | head -2

echo ""
echo "=== лблЋлАлб: лЌлљлЊлалБлЌлџлљ DIALER лА лўлАлЪлалљлњлЏлЋлЮлЮлФлюлў MODELS ==="
MODELS_FIXED_TEST=$(docker run --rm \
    -e DATABASE_URL=postgresql://dialer:dialer_pass_2025@postgres:5432/dialer \
    -e REDIS_URL=redis://redis:6379 \
    -e JWT_SECRET=test \
    dailer-backend-models-fixed:latest \
    timeout 5 node -e "try { require('./dist/services/dialer'); console.log('MODELS PATHS FIXED!'); } catch(e) { console.log('STILL ERROR:', e.message); }" 2>&1)

echo "лалхлиЛЃл╗ЛїЛѓл░Лѓ лИЛЂл┐Лђл░л▓л╗лхлйлйЛІЛЁ models: $MODELS_FIXED_TEST"

if echo "$MODELS_FIXED_TEST" | grep -q "MODELS PATHS FIXED"; then
    log "РюЁ лњлАлЋ лЪлБлблў лњ MODELS лўлАлЪлалљлњлЏлЋлЮлФ! Dialer лил░л│ЛђЛЃлХл░лхЛѓЛЂЛЈ!"
elif echo "$MODELS_FIXED_TEST" | grep -q "Cannot find module"; then
    log "РЮї лњлАлЂ лЋлЕлЂ лЪлалълЉлЏлЋлюлФ лА люлълћлБлЏл»люлў:"
    echo "$MODELS_FIXED_TEST"
    
    # лЪлЙл║л░лХлхл╝ л║л░л║лЙл╣ лИл╝лхлйлйлЙ л╝лЙл┤ЛЃл╗Лї лйлх лйл░л╣л┤лхлй
    MODULE_ERROR=$(echo "$MODELS_FIXED_TEST" | grep "Cannot find module" | head -1)
    log "  лАл╗лхл┤ЛЃЛјЛЅлИл╣ лЙЛѓЛЂЛЃЛѓЛЂЛѓл▓ЛЃЛјЛЅлИл╣ л╝лЙл┤ЛЃл╗Лї: $MODULE_ERROR"
    exit 1
else
    log "РюЁ лњлълЌлюлълќлЮлъ лњлАлЋ MODELS лЪлБлблў лўлАлЪлалљлњлЏлЋлЮлФ! лћЛђЛЃл│лИлх лЙЛѕлИл▒л║лИ"
    echo "$MODELS_FIXED_TEST"
fi

log "­Ъџђ лелљлЊ 5: лълЉлЮлълњлЏлЋлЮлўлЋ COMPOSE лў лблЋлАлб лЌлљлЪлБлАлџлљ..."

# лъл▒лйлЙл▓л╗ЛЈлхл╝ лЙл▒Лђл░ли л▓ compose
sed -i 's|dailer-backend-all-paths-fixed:latest|dailer-backend-models-fixed:latest|g' docker-compose-ready.yml

log "  лЪлхЛђлхлил░л┐ЛЃЛЂл║ backend ЛЂ лИЛЂл┐Лђл░л▓л╗лхлйлйЛІл╝лИ models..."
docker compose -f docker-compose-ready.yml stop backend 2>/dev/null || true
docker compose -f docker-compose-ready.yml rm -f backend 2>/dev/null || true
docker compose -f docker-compose-ready.yml up -d backend

log "РЈ░ лЪлалълњлЋлалџлљ MODELS лЪлБлблЋлЎ (25 ЛЂлхл║ЛЃлйл┤)..."

sleep 8

for i in {1..3}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    
    log "­ЪЊі Backend ЛЂЛѓл░ЛѓЛЃЛЂ: $BACKEND_STATUS (${i}*6 ЛЂлхл║)"
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "РюЁ Backend л║лЙлйЛѓлхл╣лйлхЛђ лЌлљлЪлБлЕлЋлЮ!"
        
        sleep 4
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Cannot find module.*config/database"; then
            log "РЮї лњлАлЂ лЋлЕлЂ лълелўлЉлџлљ config/database"
            echo "$LOGS" | grep -A 3 -B 3 "Cannot find module"
            break
            
        elif echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "РЮї лћлалБлЊлълЎ лълблАлБлблАлблњлБл«лЕлўлЎ люлълћлБлЏлг: $MODULE_ERROR"
            echo "=== лЏлълЊлў ==="
            echo "$LOGS" | head -8
            break
            
        elif echo "$LOGS" | grep -q "Config validation error"; then
            log "­ЪјЅ лњлАлЋ люлълћлБлЏлў лЌлљлЊлалБлќлЋлЮлФ! лъЛѕлИл▒л║л░ л║лЙлйЛёлИл│ЛЃЛђл░ЛєлИлИ (ЛЇЛѓлЙ ЛЃЛЂл┐лхЛЁ!)"
            CONFIG_ERROR=$(echo "$LOGS" | grep "Config validation error" | head -1)
            log "  лџлЙлйЛёлИл│ЛЃЛђл░ЛєлИлЙлйлйл░ЛЈ лЙЛѕлИл▒л║л░: $CONFIG_ERROR"
            echo "=== лЏлълЊлў лџлълЮлцлўлЊлБлалљлдлўлў ==="
            echo "$LOGS" | head -6
            break
            
        elif echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|Listening on port|Express server)"; then
            log "­ЪјЅ BACKEND лАлЋлалњлЋла лЪлълЏлЮлълАлблгл« лЌлљлЪлБлАлблўлЏлАл»!"
            
            if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                log "­ЪјЅ BACKEND API лалљлЉлълблљлЋлб!"
                
                echo ""
                echo "­ЪјЅ ­ЪјЅ ­ЪјЅ лЪлълЏлЮлљл» лЪлълЉлЋлћлљ! лњлАлЋ лЪлБлблў лўлАлЪлалљлњлЏлЋлЮлФ! ­ЪјЅ ­ЪјЅ ­ЪјЅ"
                echo ""
                echo "РюЁ лАлўлАлблЋлюлљ лЪлълЏлЮлълАлблгл« лалљлЉлълДлљл»:"
                echo "  ­ЪЏБ№ИЈ  лњЛЂлх require() л┐ЛЃЛѓлИ л▓ services/ лИЛЂл┐Лђл░л▓л╗лхлйЛІ"
                echo "  ­ЪЏБ№ИЈ  лњЛЂлх require() л┐ЛЃЛѓлИ л▓ models/ лИЛЂл┐Лђл░л▓л╗лхлйЛІ"
                echo "  ­ЪЊд лњЛЂлх л╝лЙл┤ЛЃл╗лИ лил░л│ЛђЛЃлХл░ЛјЛѓЛЂЛЈ л▒лхли лЙЛѕлИл▒лЙл║"
                echo "  ­Ъџђ Backend API лЙЛѓл▓лхЛЄл░лхЛѓ"
                echo "  ­Ъїљ лњЛЂлх 5 ЛЂлхЛђл▓лИЛЂлЙл▓ Лђл░л▒лЙЛѓл░ЛјЛѓ"
                echo ""
                echo "­Ъїљ PRODUCTION VoIP лАлўлАлблЋлюлљ лЊлълблълњлљ!"
                echo "  Frontend:     http://localhost:3000"
                echo "  Backend API:  http://localhost:3001/health"
                echo ""
                echo "­ЪЈЂ люлўлЊлалљлдлўл» FreeSWITCH Ръю ASTERISK лЌлљлњлЋлалелЋлЮлљ!"
                
                exit 0
            else
                log "Рџа№ИЈ Backend Лђл░л▒лЙЛѓл░лхЛѓ лйлЙ API лйлх лЙЛѓл▓лхЛЄл░лхЛѓ"
            fi
        else
            log "Рџа№ИЈ Backend лил░л┐ЛЃЛЅлхлй, л░лйл░л╗лИлилИЛђЛЃлхл╝ л╗лЙл│лИ..."
            if [[ $i -eq 2 ]]; then
                echo "=== лблЋлџлБлЕлўлЋ лЏлълЊлў ==="
                echo "$LOGS"
            fi
        fi
    else
        log "­ЪЊі Backend лйлх лил░л┐ЛЃЛЅлхлй: $BACKEND_STATUS"
        if [[ $i -eq 2 ]]; then
            echo "=== лЪлълЪлФлблџлљ лЪлълЏлБлДлўлблг лЏлълЊлў ==="
            docker logs dialer_backend_ready --tail 15 2>&1 || echo "лЏлЙл│лИ лйлхл┤лЙЛЂЛѓЛЃл┐лйЛІ"
        fi
    fi
    
    sleep 6
done

echo ""
echo "­ЪЊі лцлИлйл░л╗ЛїлйЛІл╣ ЛЂЛѓл░ЛѓЛЃЛЂ:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "­ЪЊЮ лЏлЙл│лИ backend л┐лЙЛЂл╗лх лИЛЂл┐Лђл░л▓л╗лхлйлИЛЈ models:"
docker logs dialer_backend_ready --tail 25 2>&1 || echo "лЏлЙл│лИ лйлхл┤лЙЛЂЛѓЛЃл┐лйЛІ"

echo ""
log "­Ъј» лалЋлЌлБлЏлглблљлб: лЪЛђлЙл▓лхЛђЛїЛѓлх ЛЂЛѓл░ЛѓЛЃЛЂ лИЛЂл┐Лђл░л▓л╗лхлйлИЛЈ models л┐ЛЃЛѓлхл╣ л▓ЛІЛѕлх" 