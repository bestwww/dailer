#!/bin/bash

# –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BACKEND –° –ü–û–õ–ù–û–ô –°–•–ï–ú–û–ô –ë–î

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BACKEND!"

log "‚úÖ –ë–õ–ï–°–¢–Ø–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ô:"
echo "  ‚úÖ –í—Å–µ 7 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úì"
echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–æ 10 —Ç–∞–±–ª–∏—Ü (–±–æ–ª—å—à–µ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å!) ‚úì"  
echo "  ‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î –≥–æ—Ç–æ–≤–∞: users, campaigns, blacklist, webhooks ‚úì"
echo "  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ –ª–æ–≥–∏ –ø—É—Å—Ç—ã–µ, API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
echo "  üéØ –î–ò–ê–ì–ù–û–ó: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–æ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è (–ù–ï –∏–∑-–∑–∞ –ë–î)"

log "üîß –®–ê–ì 1: –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BACKEND –ü–†–û–¶–ï–°–°–ê..."

echo "=== –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° BACKEND ==="
docker ps --filter "name=dialer_backend_ready" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "=== –î–ï–¢–ê–õ–¨–ù–´–ô HEALTH CHECK ==="
docker inspect dialer_backend_ready --format "{{.State.Health.Status}}: {{.State.Health.FailingStreak}} fails"

echo ""
echo "=== –ü–†–û–¶–ï–°–°–´ –í BACKEND –ö–û–ù–¢–ï–ô–ù–ï–†–ï ==="
docker exec dialer_backend_ready ps aux 2>/dev/null || echo "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

echo ""
echo "=== –°–ï–¢–ï–í–´–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø ==="
docker exec dialer_backend_ready netstat -tulpn 2>/dev/null | grep -E "(3001|LISTEN)" || echo "–ü–æ—Ä—Ç 3001 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"

log "üîß –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø..."

echo "=== –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö NODE APP.JS ==="
APP_DIRECT=$(docker exec dialer_backend_ready timeout 15 node /app/dist/app.js 2>&1 || echo "–ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:"
echo "$APP_DIRECT"

echo ""
echo "=== –ü–†–û–í–ï–†–ö–ê –ì–õ–ê–í–ù–û–ì–û –§–ê–ô–õ–ê ==="
docker exec dialer_backend_ready ls -la /app/dist/app.js 2>/dev/null || echo "app.js –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "=== –°–û–î–ï–†–ñ–ò–ú–û–ï APP.JS (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏) ==="
docker exec dialer_backend_ready head -10 /app/dist/app.js 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å app.js"

log "üîß –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø..."

echo "=== –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ==="
docker exec dialer_backend_ready env | grep -E "(NODE_ENV|DATABASE_URL|JWT_SECRET|PORT|ASTERISK)" | sort

log "üîß –®–ê–ì 4: –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î..."

echo "=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ==="
DB_TEST=$(docker exec dialer_backend_ready timeout 10 node -e "
const { Pool } = require('pg');
const pool = new Pool({connectionString: process.env.DATABASE_URL});
pool.query('SELECT COUNT(*) FROM users', (err, res) => {
  if (err) {
    console.log('DB ERROR:', err.message);
  } else {
    console.log('DB SUCCESS: Found', res.rows[0].count, 'users');
  }
  process.exit(0);
});
" 2>&1)
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ë–î:"
echo "$DB_TEST"

log "üîß –®–ê–ì 5: –ó–ê–ü–£–°–ö –° –î–ï–ë–ê–ì–û–ú..."

echo "=== –ó–ê–ü–£–°–ö –° NODE DEBUG –§–õ–ê–ì–ê–ú–ò ==="
DEBUG_START=$(docker exec dialer_backend_ready timeout 20 node --trace-warnings --trace-uncaught /app/dist/app.js 2>&1 || echo "Debug –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç debug –∑–∞–ø—É—Å–∫–∞:"
echo "$DEBUG_START"

log "üîß –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô..."

echo "=== –ü–†–û–í–ï–†–ö–ê NODE_MODULES ==="
docker exec dialer_backend_ready ls -la /app/node_modules/ | head -10

echo ""
echo "=== –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–ê–ö–ï–¢–û–í ==="
PACKAGES=("express" "pg" "redis" "joi")
for pkg in "${PACKAGES[@]}"; do
    if docker exec dialer_backend_ready ls /app/node_modules/$pkg >/dev/null 2>&1; then
        echo "‚úÖ $pkg - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå $pkg - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

log "üîß –®–ê–ì 7: –ü–†–û–í–ï–†–ö–ê DUMB-INIT..."

echo "=== –ü–†–û–¶–ï–°–° DUMB-INIT ==="
docker exec dialer_backend_ready ps aux | grep dumb-init

echo ""
echo "=== –¢–ï–°–¢ –ë–ï–ó DUMB-INIT ==="
NO_DUMB_TEST=$(docker exec dialer_backend_ready timeout 15 /app/dist/app.js 2>&1 || echo "–¢–µ—Å—Ç –±–µ–∑ dumb-init –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ dumb-init:"
echo "$NO_DUMB_TEST"

log "üîß –®–ê–ì 8: –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê..."

echo "=== –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û HTTP –°–ï–†–í–ï–†–ê ==="
docker exec dialer_backend_ready bash -c "cat > /tmp/simple_server.js << 'EOF'
const http = require('http');
const server = http.createServer((req, res) => {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('Simple server works!');
});
server.listen(3001, () => {
  console.log('Simple server listening on port 3001');
});
EOF"

echo ""
echo "=== –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û –°–ï–†–í–ï–†–ê ==="
SIMPLE_TEST=$(docker exec dialer_backend_ready timeout 10 node /tmp/simple_server.js 2>&1 & 
sleep 3
curl -sf http://localhost:3001 2>&1 || echo "–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
docker exec dialer_backend_ready pkill -f simple_server 2>/dev/null)
echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
echo "$SIMPLE_TEST"

log "üöÄ –®–ê–ì 9: –ü–û–ü–´–¢–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø..."

if echo "$APP_DIRECT" | grep -q "Error\|error\|ERROR"; then
    log "‚ùå –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!"
    echo "–û—à–∏–±–∫–∞:"
    echo "$APP_DIRECT" | grep -i error | head -3
    
    if echo "$APP_DIRECT" | grep -q "Cannot find module"; then
        log "  üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥—É–ª—è–º–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏..."
        
        echo "=== –°–¢–†–£–ö–¢–£–†–ê DIST ==="
        docker exec dialer_backend_ready find /app/dist -name "*.js" | head -15
        
    elif echo "$APP_DIRECT" | grep -q "Config validation"; then
        log "  üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ..."
        
        echo "=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ==="
        # –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        
    elif echo "$APP_DIRECT" | grep -q "EADDRINUSE"; then
        log "  üîß –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º..."
        docker exec dialer_backend_ready netstat -tulpn | grep 3001
        
    else
        log "  üîß –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
    fi
    
elif echo "$APP_DIRECT" | grep -q "listening\|started\|ready"; then
    log "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç —É—Å–ø–µ—à–Ω–æ!"
    
    echo "=== –¢–ï–°–¢ API –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –°–¢–ê–†–¢–ê ==="
    sleep 3
    if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
        log "üéâ API –†–ê–ë–û–¢–ê–ï–¢! –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ dumb-init!"
        
        echo ""
        echo "üéâ üéâ üéâ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê! üéâ üéâ üéâ"
        echo ""
        echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´:"
        echo "  üõ£Ô∏è  –í–°–ï require() –ø—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
        echo "  üì¶ –í–°–ï –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è"
        echo "  üîí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        echo "  üê≥ Docker –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"
        echo "  üóÑÔ∏è  –ü–æ–ª–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î –∏–∑ 10 —Ç–∞–±–ª–∏—Ü"
        echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
        echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
        echo ""
        echo "üåê PRODUCTION VoIP –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!"
        echo "  Frontend:     http://localhost:3000"
        echo "  Backend API:  http://localhost:3001/health"
        echo "  Asterisk AMI: localhost:5038"
        echo ""
        echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê!"
        
        exit 0
    else
        log "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Å–Ω–∞—Ä—É–∂–∏"
    fi
else
    log "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"
    echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
    echo "- –ü—Ä–æ–±–ª–µ–º–∞ —Å async/await"
    echo "- –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
    echo "- –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π"
fi

log "üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:"

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker-compose-ready.yml ps

echo ""
echo "üóÑÔ∏è –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (10 —Ç–∞–±–ª–∏—Ü):"
docker exec dialer_postgres_ready psql -U dialer -d dialer -c "\dt"

echo ""
echo "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ:"
docker logs dialer_backend_ready --tail 10 2>&1

echo ""
if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
    log "üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!"
else
    log "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã—à–µ"
fi 