#!/bin/bash

# –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï UTILS/LOGGER.JS –ò –î–†–£–ì–ò–• –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "üéØ –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –§–ê–ô–õ–û–í"

log "üîç –î–ò–ê–ì–ù–û–ó:"
echo "  utils/logger.js –≤—Å–µ –µ—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: require('./config')"
echo "  –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: require('../config')"
echo "  –ù—É–∂–µ–Ω –ø—Ä—è–º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"

# –ò–∑–≤–ª–µ–∫–∞–µ–º dist –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–∑–∞  
BACKEND_IMAGE="dailer-backend-fully-fixed:latest"
TEMP_CONTAINER="temp_direct_fix"

docker create --name $TEMP_CONTAINER $BACKEND_IMAGE
docker cp $TEMP_CONTAINER:/app/dist ./temp_dist_direct
docker rm $TEMP_CONTAINER

log "üîß –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–û–ë–õ–ï–ú–£ –ü–ï–†–ï–î –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú:"
echo "=== –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –°–¢–†–û–ö–ê –í utils/logger.js ==="
grep -n "require.*config" temp_dist_direct/utils/logger.js || echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

log "üõ†Ô∏è –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ñ–î–û–ì–û –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –§–ê–ô–õ–ê..."

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º utils/logger.js –Ω–∞–ø—Ä—è–º—É—é
if [ -f temp_dist_direct/utils/logger.js ]; then
    log "  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º utils/logger.js..."
    sed -i 's|require("./config")|require("../config")|g' temp_dist_direct/utils/logger.js
    sed -i "s|require('./config')|require('../config')|g" temp_dist_direct/utils/logger.js
    
    echo "=== –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø utils/logger.js ==="
    grep -n "require.*config" temp_dist_direct/utils/logger.js
else
    log "‚ùå utils/logger.js –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
log "  –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö..."

# –î–ª—è –≤—Å–µ—Ö .js —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö (depth 1)
find temp_dist_direct -mindepth 2 -maxdepth 2 -name "*.js" -type f | while read file; do
    if grep -q '@/' "$file" 2>/dev/null; then
        log "    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: $file"
        sed -i 's|require("@/config")|require("../config")|g' "$file"
        sed -i 's|require("@/utils")|require("../utils")|g' "$file"
        sed -i 's|require("@/services")|require("../services")|g' "$file"
        sed -i 's|require("@/models")|require("../models")|g' "$file"
        sed -i 's|require("@/controllers")|require("../controllers")|g' "$file"
        sed -i 's|require("@/middleware")|require("../middleware")|g' "$file"
        sed -i 's|require("@/types")|require("../types")|g' "$file"
    fi
    
    # –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ./config –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    if grep -q 'require("./config")' "$file" 2>/dev/null; then
        log "    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ./config –≤: $file"
        sed -i 's|require("./config")|require("../config")|g' "$file"
    fi
done

# –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ –≥–ª—É–±–∏–Ω–µ 2
find temp_dist_direct -mindepth 3 -maxdepth 3 -name "*.js" -type f | while read file; do
    if grep -q '@/' "$file" 2>/dev/null; then
        log "    –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≥–ª—É–±–∏–Ω—É 2: $file"
        sed -i 's|require("@/config")|require("../../config")|g' "$file"
        sed -i 's|require("@/utils")|require("../../utils")|g' "$file"
        sed -i 's|require("@/services")|require("../../services")|g' "$file"
        sed -i 's|require("@/models")|require("../../models")|g' "$file"
        sed -i 's|require("@/controllers")|require("../../controllers")|g' "$file"
        sed -i 's|require("@/middleware")|require("../../middleware")|g' "$file"
        sed -i 's|require("@/types")|require("../../types")|g' "$file"
    fi
done

log "‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo ""
echo "=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô utils/logger.js ==="
grep -n "require.*config" temp_dist_direct/utils/logger.js || echo "–ù–µ—Ç require config"

echo ""
echo "=== –ü–û–ò–°–ö –û–°–¢–ê–í–®–ò–•–°–Ø @/ –ê–õ–ò–ê–°–û–í –í .js –§–ê–ô–õ–ê–• ==="
find temp_dist_direct -name "*.js" -type f -exec grep -l "@/" {} \; | head -5 || echo "‚úÖ –í—Å–µ @/ –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ .js —Ñ–∞–π–ª–∞—Ö!"

echo ""
echo "=== –ü–û–ò–°–ö –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• ./config –í –ü–û–î–ü–ê–ü–ö–ê–• ==="
find temp_dist_direct -mindepth 2 -name "*.js" -type f -exec grep -l 'require("./config")' {} \; || echo "‚úÖ –í—Å–µ ./config –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"

log "üöÄ –°–û–ó–î–ê–ï–ú –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ó..."

# –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π Dockerfile
cat > Dockerfile.final_fix << 'EOF'
FROM dailer-backend-fully-fixed:latest

# –ö–æ–ø–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é dist –ø–∞–ø–∫—É
COPY temp_dist_direct /app/dist

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
USER root
RUN chown -R nodeuser:nodejs /app/dist
USER nodeuser

CMD ["node", "dist/app.js"]
EOF

# –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
docker build -f Dockerfile.final_fix -t dailer-backend-final:latest .

# –û–±–Ω–æ–≤–ª—è–µ–º docker-compose
sed -i 's|dailer-backend-fully-fixed:latest|dailer-backend-final:latest|g' docker-compose-ready.yml

# –û—á–∏—Å—Ç–∫–∞
rm -rf temp_dist_direct Dockerfile.final_fix

log "üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö..."

docker compose -f docker-compose-ready.yml stop backend
docker compose -f docker-compose-ready.yml rm -f backend
docker compose -f docker-compose-ready.yml up -d backend

log "‚è∞ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (45 —Å–µ–∫—É–Ω–¥)..."

sleep 10

for i in {1..7}; do
    BACKEND_STATUS=$(docker ps --filter "name=dialer_backend_ready" --format "{{.Status}}" 2>/dev/null)
    
    if echo "$BACKEND_STATUS" | grep -q "Up"; then
        log "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω: $BACKEND_STATUS"
        
        sleep 5
        LOGS=$(docker logs dialer_backend_ready --tail 15 2>&1)
        
        if echo "$LOGS" | grep -q "Cannot find module"; then
            MODULE_ERROR=$(echo "$LOGS" | grep "Cannot find module" | head -1)
            log "‚ùå –í—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª–µ–π: $MODULE_ERROR"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª –∏ –º–æ–¥—É–ª—å
            echo "=== –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò ==="
            echo "$LOGS" | grep -A 5 -B 5 "Cannot find module"
            
        elif echo "$LOGS" | grep -q "Error:"; then
            ERROR_MSG=$(echo "$LOGS" | grep "Error:" | head -1)
            log "‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: $ERROR_MSG"
        else
            log "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –û–®–ò–ë–û–ö!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç
            if echo "$LOGS" | grep -q -E "(Server.*listening|started|ready|port)"; then
                log "‚úÖ Backend —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç!"
                
                # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API
                sleep 5
                if curl -sf http://localhost:3001/health >/dev/null 2>&1; then
                    log "üéâ BACKEND API –†–ê–ë–û–¢–ê–ï–¢!"
                    
                    echo ""
                    echo "üéâ üéâ üéâ –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê! –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢! üéâ üéâ üéâ"
                    echo ""
                    echo "‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –†–ï–®–ï–ù–´:"
                    echo "  üéØ TypeScript path alias –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
                    echo "  üîê JWT_SECRET –Ω–∞—Å—Ç—Ä–æ–µ–Ω" 
                    echo "  üìù –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"
                    echo "  üöÄ Backend API –æ—Ç–≤–µ—á–∞–µ—Ç"
                    echo "  üåê –í—Å–µ 5 —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç"
                    echo ""
                    echo "üåê –†–ê–ë–û–ß–ê–Ø VoIP –°–ò–°–¢–ï–ú–ê:"
                    echo "  Frontend:     http://localhost:3000"
                    echo "  Backend API:  http://localhost:3001/health"
                    echo "  Asterisk CLI: docker exec -it dialer_asterisk_ready asterisk -r"
                    echo ""
                    echo "üèÅ –ú–ò–ì–†–ê–¶–ò–Ø FreeSWITCH ‚ûú ASTERISK –ó–ê–í–ï–†–®–ï–ù–ê –ù–ê 100%!"
                    echo ""
                    echo "üéØ –ì–û–¢–û–í–û –ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
                    
                    echo ""
                    echo "üìä –°–¢–ê–¢–£–° –í–°–ï–• –°–ï–†–í–ò–°–û–í:"
                    docker compose -f docker-compose-ready.yml ps
                    
                    exit 0
                else
                    log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (${i}*5 —Å–µ–∫)"
                fi
            else
                log "‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–ª—É—à–∞–µ—Ç (${i}*5 —Å–µ–∫)"
            fi
        fi
    else
        log "üìä Backend —Å—Ç–∞—Ç—É—Å: $BACKEND_STATUS (${i}*5 —Å–µ–∫)"
    fi
    
    sleep 5
done

log "‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."
echo ""
echo "üìù –ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ backend:"
docker logs dialer_backend_ready

echo ""
echo "üîß –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ utils/logger.js –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –æ–±—Ä–∞–∑–µ:"
docker run --rm dailer-backend-final:latest cat dist/utils/logger.js | grep -n "require.*config"

exit 1 